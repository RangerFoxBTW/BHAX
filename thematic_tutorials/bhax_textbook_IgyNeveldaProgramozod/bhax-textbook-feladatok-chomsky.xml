<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Decimálisból unárisba átváltó Turing gép</title>
        <para>
            Állapotátmenet gráfjával megadva írd meg ezt a gépet!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/zKQyQKWMNPU">https://youtu.be/zKQyQKWMNPU</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="src/Chomsky/unaris.cpp">unaris.cpp</link>               
        </para>
        <para>
            Az unáris (egyes) számrendszer a legegyszerűbb számrendszer. Lényegében az ujjunkon való számoláskor is ezt használjuk. Amekkora számot akarunk kifejezni 
            így, annyi 1-est írunk le. Például a decimális 6-os számot úgy konvertáljuk unárisba, hogy hatszor leírunk egy 1-est: 111111.
        </para>
        <para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/Chomsky/Turing.png" scale="50"/>
                </imageobject>
            </mediaobject>
        </para>
        <para>
            A fenti állapotgráf egy "végtelen szalagos és memóriás" Turing gépet mutat be, ahogy decimálisból unáris számrendszerbe vált át. Ehhez azt csinálja, hogy 
            a számból addig von ki 1-et, amíg az 0 nem lesz, és ezeket az egyeseket a művelet közben a tárba írja ki. A művelet az utolsó számjegyen kezdődik, ha az 0-ás,
            akkor 9-cel megy tovább, ha ettől eltérő, akkor mindig eggyel kevesebbel megy a zölddel jelölt állapotba. Ez addig folytatódik, amíg újra 0-ást kapunk, 
            ezután a következő számjegyre tér át, és végrehajtja ugyanezeket a folyamatokat, míg a végén a szám első számjegyénél is 0-ást kap. 
        </para>
        <para>
            <programlisting language="C++"><![CDATA[
#include <iostream>

using namespace std;

void konvertal(int szam)
{
    cout << endl;
    for(int i = 0; i < szam; i++)
    {
        cout << "1";
    }
    cout << endl;
}

int main()
{
    int szam;
    
    cout << "Adj meg egy szamot!" << endl;
    cin >> szam;
    
    konvertal(szam);
}]]></programlisting>
        </para>
        <para>
            Készítettem egy nagyon egyszerű átváltó C++ programot. Tényleg nagyon egyszerű, ezért nem szeretném túlmagyarázni. A main-ben bekérek a felhasználótól egy 
            számot, ezután meghívom a konvertal eljárást erre a számra, ami egy for ciklus segítségével annyi 1-est ír az alapértelmezett outputra, amekkora a szám volt.
        </para>
    </section>        
        
    <section>
        <title>Az a<superscript>n</superscript>b<superscript>n</superscript>c<superscript>n</superscript> nyelv nem környezetfüggetlen</title>
        <para>
            Mutass be legalább két környezetfüggő generatív grammatikát, amely ezt a nyelvet generálja!
        </para>
        <para>
            Megoldás forrása: A fejezetbe ágyazva.                
        </para>
        <para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/Chomsky/logika1.jpg" scale="50"/>
                </imageobject>
            </mediaobject>
        </para>
        <para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/Chomsky/logika2.jpg" scale="50"/>
                </imageobject>
            </mediaobject>           
        </para>
        <para>
            Noam Chomsky, egy amerikai nyelvész nevéhez nem csak a fejezet címe, hanem a generatív grammatika, valamint a Chomsky-hierarchia is köthető. Utóbbival 
            formális nyelveket szoktak lehet osztályozni. Úgy működik, hogy nyelv részeit kifejezőerő alapján osztályozza, és az erősebb osztályok elemei képesek 
            megalkotni a gyengébb oszáltyok elemeit. Az alsóbb osztályokat a levezetési szabályok alkalmazásával állíthatjuk elő. Addig kell ezeket a szabályokat 
            alkalmazni, míg a kifejezés csak konstansokból nem fog állni. Fentebb látható két általam levezetett példa, az első az 
            a<superscript>2</superscript>b<superscript>2</superscript>c<superscript>2</superscript> nyelvet generálja a levezetésben, a második az 
            a<superscript>4</superscript>b<superscript>4</superscript>c<superscript>4</superscript> nyelvet.
        </para>
    </section>        
                
    <section>
        <title>Hivatkozási nyelv</title>
        <para>
            A <citation>KERNIGHANRITCHIE</citation> könyv C referencia-kézikönyv/Utasítások melléklete alapján definiáld 
            BNF-ben a C utasítás fogalmát!
            Majd mutass be olyan kódcsipeteket, amelyek adott szabvánnyal nem fordulnak (például C89), mással (például C99) igen.
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/lBeq2_AnbSQ">https://youtu.be/lBeq2_AnbSQ</link>
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="src/Chomsky/hiba.c">hiba.c</link>
        </para>
        <para>
            A Backus-Naur-Form egy nyelvek szintaxisának leírására szolgáló eszköz. A működését <link xlink:href="https://www.youtube.com/watch?v=vdtAxiEXIBo">ebből</link> 
            a videóból tanultam meg, ezután nem volt bonyolult megalkotni a C utasítást így.
        </para>
        <para>
            <programlisting language="c"><![CDATA[
<utasítás>
<címkézett_ utasítás> ::= <azonosító> | <case> | <default>
<kifejezés_utasítás> ::= <kifejezés>
<összetett_utasítás> ::= <deklarációs_lista> | <utasítás_lista>
<deklarációs_lista> ::= <deklaráció> | <deklarációs_lista deklaráció>
<utasítás_lista> ::= <utasítás> | <utasítás_lista utasítás>
<kiválasztó_utasítás> ::= if | if else | switch
<iterációs_utasítás> ::= while | do while | for
<vezérlésátadó_ utasítás> ::= goto | continue | break | return]]></programlisting>
        </para>
        <para>
            Néhány példa olyan utasításokra, amik bizonyos verziójú C fordítóknál hibát adnak:
        </para>
        <para>
            <programlisting language="c"><![CDATA[
#include <stdio.h>

int main()
{
    //komment                    //-rel nem lehet kommentelni, csak /**/-rel jó

    for (int i = 0; i < 5; i++) //nem lehet for cikluson belül deklarálni
    {
        long long int a = 2;    //nem támogatott típus
    }
    gets(a);                    //warning, c11-gyel már hiba
}]]></programlisting>
        </para>
        <para>
            <mediaobject>
                <imageobject>
                        <imagedata fileref="img/Chomsky/hiba.png"/>
                </imageobject>
            </mediaobject>
        </para>
    </section>                     

    <section>
        <title>Saját lexikális elemző</title>
        <para>
            Írj olyan programot, ami számolja a bemenetén megjelenő valós számokat! 
            Nem elfogadható olyan megoldás, amely maga olvassa betűnként a bemenetet, 
            a feladat lényege, hogy lexert használjunk, azaz óriások vállán álljunk és ne kispályázzunk!
        </para>
        <para>
            dr. Bátfai Norbert megoldása: <link xlink:href="https://youtu.be/9KnMqrkj_kU">https://youtu.be/9KnMqrkj_kU</link> (15:01-től).
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Chomsky/realnumber.l">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Chomsky/realnumber.l</filename>
            </link> 
        </para>
        <programlisting language="c"><![CDATA[%{
#include <stdio.h>
int realnumbers = 0;
%}
digit	[0-9]
%%
{digit}*(\.{digit}+)?	{++realnumbers; 
    printf("[realnum=%s %f]", yytext, atof(yytext));}
%%
int
main ()
{
 yylex ();
 printf("The number of real numbers is %d\n", realnumbers);
 return 0;
}
]]></programlisting>
        <para>
            
        </para>
    </section>                     

    <section>
        <title>Leetspeak</title>
        <para>
            Lexelj össze egy l33t ciphert!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/06C_PqDpD_k">https://youtu.be/06C_PqDpD_k</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Chomsky/l337d1c7.l">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Chomsky/l337d1c7.l</filename>
            </link>  
        </para>
        <programlisting language="c"><![CDATA[
%{
  #include <stdio.h>
  #include <stdlib.h>
  #include <time.h>
  #include <ctype.h>

  #define L337SIZE (sizeof l337d1c7 / sizeof (struct cipher))
    
  struct cipher {
    char c;
    char *leet[4];
  } l337d1c7 [] = {

  {'a', {"4", "4", "@", "/-\\"}},
  {'b', {"b", "8", "|3", "|}"}},
  {'c', {"c", "(", "<", "{"}},
  {'d', {"d", "|)", "|]", "|}"}},
  {'e', {"3", "3", "3", "3"}},
  {'f', {"f", "|=", "ph", "|#"}},
  {'g', {"g", "6", "[", "[+"}},
  {'h', {"h", "4", "|-|", "[-]"}},
  {'i', {"1", "1", "|", "!"}},
  {'j', {"j", "7", "_|", "_/"}},
  {'k', {"k", "|<", "1<", "|{"}},
  {'l', {"l", "1", "|", "|_"}},
  {'m', {"m", "44", "(V)", "|\\/|"}},
  {'n', {"n", "|\\|", "/\\/", "/V"}},
  {'o', {"0", "0", "()", "[]"}},
  {'p', {"p", "/o", "|D", "|o"}},
  {'q', {"q", "9", "O_", "(,)"}},
  {'r', {"r", "12", "12", "|2"}},
  {'s', {"s", "5", "$", "$"}},
  {'t', {"t", "7", "7", "'|'"}},
  {'u', {"u", "|_|", "(_)", "[_]"}},
  {'v', {"v", "\\/", "\\/", "\\/"}},
  {'w', {"w", "VV", "\\/\\/", "(/\\)"}},
  {'x', {"x", "%", ")(", ")("}},
  {'y', {"y", "", "", ""}},
  {'z', {"z", "2", "7_", ">_"}},
  
  {'0', {"D", "0", "D", "0"}},
  {'1', {"I", "I", "L", "L"}},
  {'2', {"Z", "Z", "Z", "e"}},
  {'3', {"E", "E", "E", "E"}},
  {'4', {"h", "h", "A", "A"}},
  {'5', {"S", "S", "S", "S"}},
  {'6', {"b", "b", "G", "G"}},
  {'7', {"T", "T", "j", "j"}},
  {'8', {"X", "X", "X", "X"}},
  {'9', {"g", "g", "j", "j"}}
  
// https://simple.wikipedia.org/wiki/Leet
  };
  
%}
%%
.	{
	  
	  int found = 0;
	  for(int i=0; i<L337SIZE; ++i)
	  {
	  
	    if(l337d1c7[i].c == tolower(*yytext))
	    {
	    
	      int r = 1+(int) (100.0*rand()/(RAND_MAX+1.0));
	    
          if(r<91)
	        printf("%s", l337d1c7[i].leet[0]);
          else if(r<95)
	        printf("%s", l337d1c7[i].leet[1]);
	      else if(r<98)
	        printf("%s", l337d1c7[i].leet[2]);
	      else 
	        printf("%s", l337d1c7[i].leet[3]);

	      found = 1;
	      break;
	    }
	    
	  }
	  
	  if(!found)
	     printf("%c", *yytext);	  
	  
	}
%%
int 
main()
{
  srand(time(NULL)+getpid());
  yylex();
  return 0;
}
]]></programlisting>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>                     


    <section>
        <title>A források olvasása</title>
        <para>
            Hogyan olvasod, hogyan értelmezed természetes nyelven az alábbi kódcsipeteket? Például
            <programlisting><![CDATA[if(signal(SIGINT, jelkezelo)==SIG_IGN)
    signal(SIGINT, SIG_IGN);]]></programlisting>
            Ha a SIGINT jel kezelése figyelmen kívül volt hagyva, akkor ezen túl is legyen
            figyelmen kívül hagyva, ha nem volt figyelmen kívül hagyva, akkor a jelkezelo függvény
            kezelje. (Miután a <command>man 7 signal</command> lapon megismertem a SIGINT jelet, a
            <command>man 2 signal</command> lapon pedig a használt rendszerhívást.)
        </para>

        <caution>
            <title>Bugok</title>
            <para>
                Vigyázz, sok csipet kerülendő, mert bugokat visz a kódba! Melyek ezek és miért? 
                Ha nem megy ránézésre, elkapja valamelyiket esetleg a splint vagy a frama?
            </para>
        </caution>
            
        <orderedlist numeration="lowerroman">
            <listitem>                                    
                <programlisting><![CDATA[if(signal(SIGINT, SIG_IGN)!=SIG_IGN)
    signal(SIGINT, jelkezelo);]]></programlisting>
            </listitem>
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; ++i)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; i++)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; tomb[i] = i++)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<n && (*d++ = *s++); ++i)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a, ++a), f(++a, a));]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a), a);]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(&a), a);]]></programlisting>            
            </listitem>
        </orderedlist>
        <para>
            Megoldás forrása:  
        </para>

        <para>
            Megoldás videó: 
        </para>

        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>

    </section>                     

    <section>
        <title>Logikus</title>
        <para>
            Hogyan olvasod természetes nyelven az alábbi Ar nyelvű formulákat?
        </para>
        <programlisting language="tex"><![CDATA[$(\forall x \exists y ((x<y)\wedge(y \text{ prím})))$ 

$(\forall x \exists y ((x<y)\wedge(y \text{ prím})\wedge(SSy \text{ prím})))$ 

$(\exists y \forall x (x \text{ prím}) \supset (x<y)) $ 

$(\exists y \forall x (y<x) \supset \neg (x \text{ prím}))$
]]></programlisting>        
        <para>
            Megoldás forrása: A fejezetbe ágyazva.
        </para>
        <para>
            Legnagyobb örömömre előkerestem a logika jegyzetemet, az ott tanultak alapján pedig megoldottam a feladatot.
        </para>
        <para>
            <mediaobject>
                <imageobject>
                        <imagedata fileref=""/>
                </imageobject>
            </mediaobject>
        </para>
    </section>                                                                                                                                                                            
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
    <section>
        <title>Deklaráció</title> 

        <para>
            Vezesd be egy programba (forduljon le) a következőket: 
        </para>

        <itemizedlist>
            <listitem>
                <para>egész</para>                     
            </listitem>
            <listitem>
                <para>egészre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egész referenciája</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbjének referenciája (nem az első elemé)</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatók tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvény</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvényre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvény</para>                        
            </listitem>            
            <listitem>
                <para>függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvényre</para>                        
            </listitem>            
        </itemizedlist>            

        <para>
            Mit vezetnek be a programba a következő nevek?
        </para>

        <itemizedlist>
            <listitem>
                <programlisting><![CDATA[int a;]]></programlisting>            
            <para>
                Egy a-val jelölt egész típusú változót.
            </para>
            </listitem>
            
            <listitem>
                <programlisting><![CDATA[int *b = &a;]]></programlisting>            
            <para>
                Egy "b"-vel jelölt egészre mutató pointert, ami az "a" változó címét tartalmazza.
            </para>
            </listitem>
            
            <listitem>
                <programlisting><![CDATA[int &r = a;]]></programlisting>            
            <para>
                Egy "r"-rel jelölt egész típusú referencia, ami az "a" értékét veszi föl.
            </para>
            </listitem>
            
            <listitem>
                <programlisting><![CDATA[int c[5];]]></programlisting>            
            <para>
                Egy "c"-vel jelölt 5 elemű, egészeket tartalmazó tömb.
            </para>
            </listitem>
            
            <listitem>
                <programlisting><![CDATA[int (&tr)[5] = c;]]></programlisting>            
            <para>
                Egy 5 elemű egész számokat tartalmazó tömbre mutató pointer, ami a "c" tömbre mutat. Vagyis egy egész számokat tartalmazó tömb referenciája.
            </para>
            </listitem>
            
            <listitem>
                <programlisting><![CDATA[int *d[5];]]></programlisting>            
            <para>
                Egy "d"-vel jelölt 5 elemű egészekre mutató pointereket tartalmazó tömb.
            </para>
            </listitem>
            
            <listitem>
                <programlisting><![CDATA[int *h ();]]></programlisting>            
            <para>
               Egy egészre mutató pointert visszaadó függvény.
            </para>
            </listitem>
            
            <listitem>
                <programlisting><![CDATA[int *(*l) ();]]></programlisting>            
            <para>
                Egy függvényre mutató pointer, aminek a visszatérési értéke egy egészre mutató pointer.
            </para>
            </listitem>
            
            <listitem>
                <programlisting><![CDATA[int (*v (int c)) (int a, int b)]]></programlisting>            
            <para>
                Egy egész számot kérő function ami egy pointert ad vissza egy function-re, ami két egészet kér, és egy egészet ad vissza.
            </para> 
            </listitem>  
                     
            <listitem>
                <programlisting><![CDATA[int (*(*z) (int)) (int, int);]]></programlisting>            
            <para>  
                Egy egészet kérő function-re mutató pointer, ami egy pointert ad vissza egy function-re, ami két egészet kér, és egy egészet ad vissza.
            </para> 
            </listitem>  
        </itemizedlist>       

        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            Az utolsó két deklarációs példa demonstrálására két olyan kódot
            írtunk, amelyek összahasonlítása azt mutatja meg, hogy miért 
            érdemes a <command>typedef</command> használata: <link xlink:href="Chomsky/fptr.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Chomsky/fptr.c</filename>
            </link>,
            <link xlink:href="Chomsky/fptr2.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Chomsky/fptr2.c</filename>.
            </link>    
        </para>
        <programlisting><![CDATA[
#include <stdio.h>

int sum(int a, int b)
{
    return a + b;
}

int mul(int a, int b)
{
    return a * b;
}

int(*sumormul (int c)) (int a, int b)
{
    if (c)
        return mul;
    else
        return sum;

}

int main()
{

    int (*f) (int, int);

    f = sum;

    printf ("%d\n", f (2, 3));

    int (*(*g) (int)) (int, int);

    g = sumormul;

    f = *g (42);

    printf ("%d\n", f (2, 3));

    return 0;
}]]></programlisting>            
        <programlisting><![CDATA[
#include <stdio.h>

typedef int (*F) (int, int);
typedef int (*(*G) (int)) (int, int);

int sum(int a, int b)
{
    return a + b;
}

int mul(int a, int b)
{
    return a * b;
}

F sumormul (int c)
{
    if (c)
        return mul;
    else
        return sum;
}

int main()
{

    F f = sum;

    printf ("%d\n", f (2, 3));

    G g = sumormul;

    f = *g (42);

    printf ("%d\n", f (2, 3));

    return 0;
}]]></programlisting>            
    </section>                     

    <section>
        <title>Minecraft MALMÖ (csiga diszkrét)</title>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
    </section
</chapter>                
