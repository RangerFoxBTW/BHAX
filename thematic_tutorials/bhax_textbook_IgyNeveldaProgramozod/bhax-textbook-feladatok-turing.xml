<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            A ciklusok, vagy más néven iterációk a programozók egyik leghasznosabb eszközei. Alapjáraton a végtelen ciklus egy HIBA, kivéve, 
            ha a programozó direkt végtelen ciklust szeretne létrehozni. Ezt számos módon megteheti, valamint számos oka lehet erre. Például egy 
            szerveren bizonyos folyamatnak/szolgáltatásnak állandóan futnia kell, ennek a kivitelezésére pedig a végtelen ciklus egy tökéletes 
            megoldás. Akkor is nagy hasznát veszi a programozó a végtelen ciklusoknak, ha a BHAX könyv ilyenek írására kéri...
        </para>                    
        <para>
            Egy mag 100 százalékban:               
        </para>
         <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="src/Turing/vegtelen1.c">
                <filename>vegtelen1.c</filename>
            </link>
        </para> 
        <programlisting language="c"><![CDATA[
int main()
{
    for(;;);
}
]]>
        </programlisting>
        <para>
            Ebben a formában a kód minden C szabvánnyal lefordul. Sokat nem lehet róla mondani. Mivel a ciklusfejben nincs semmilyen feltétel megadva,
            így addig fog futni, amíg manuálisan le nem állítjuk.
        </para>            
        <mediaobject>
            <imageobject>
                <imagedata fileref="img/Turing/1mag100.png" scale="100"/>
            </imageobject>
            <caption>
                <para>1 mag 100%</para>
            </caption>
        </mediaobject>
        <para>
            Egy mag 0 százalékban:               
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="src/Turing/vegtelen2.c">
                <filename>vegtelen2.c</filename>
            </link>
        </para>        
        <programlisting language="c"><![CDATA[
#include <unistd.h>
int main()
{
  for (;;)
    sleep(1);
}
]]>
        </programlisting>    
        <para>
            Ehhez a feladathoz az első programkódot csak egy kicsit kellett megváltoztatnunk. Először is include-olni kell az unistd.h nevű header fájlt, hogy 
            használhassuk a sleep() eljárást. Miután meghívjuk, lassítja az iterálás sebességét, így a processzor sose lesz 100%-os kihasználtságon.
        </para>    
        <para>
            Minden mag 100 százalékban:               
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="src/Turing/vegtelen3.c">
                <filename>vegtelen3.c</filename>
            </link>
        </para>
        <programlisting language="c"><![CDATA[
#include <omp.h>
int main()
{
#pragma omp parallel
{
  for (;;);
}
}
]]>
        </programlisting>        
        <para>
           Ehhez a feladathoz a végtelen ciklusunkat több szálon, párhuzamosan kell futtatnunk. Erre megoldást nyújthat az OpenMP, melynek használatához include-oljuk 
           az omp.h headert. Dióhéjban úgy működik, hogy azt az utasítást, amit a #pragma omp parallel-el megjelölünk, rákényszeríti, hogy minden szálon, egymástól 
           függetlenül hajtódjon végre. Mivel ez a ciklus sose ér véget, így elérjük, hogy a programunk 100%-on kihasználja a CPU-t.
        </para>
         <mediaobject>
            <imageobject>
                <imagedata fileref="img/Turing/minden100.png" scale="50"/>
            </imageobject>
            <caption>
                <para>Minden mag 100%</para>
            </caption>
        </mediaobject>
                                
        <tip>
            <title>Werkfilm</title>
            <itemizedlist>
                <listitem>
                    <para>
                        <link xlink:href="https://youtu.be/lvmi6tyz-nI">https://youtu.be/lvmi6tyz-nI</link>
                    </para>    
                </listitem>                
            </itemizedlist>                
        </tip>
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Tegyük fel, hogy  meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne végtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása az előző végtelen ciklust tartalmazó programunkra:
            <screen><![CDATA[T100(vegtelen1.c)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit fog kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
            Habár a fenti indirekt bizonyításból is egyértelműen látszik, előttünk már Turing is bebizonyította azt, hogy nem létezik ilyen algoritmus. 
            Ennek megállási probléma a neve. Lényege, hogy ha egy végtelenségig futó programot kap meg tesztelésre ez a nem létező algoritmus, akkor az ugyanúgy a 
            végtelenségig fogja tesztelni a bemenetet, így ő maga is le fog fagyni előbb utóbb. Így könnyen beláthatjuk, hogy nem létezik ilyen program.
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="src/Turing/valtozo.c">
                <filename>valtozo.c</filename>
            </link>
        </para>
        <programlisting language="C"><![CDATA[
#include<stdio.h>
int main()
{
    int a = 4;
    int b = 6;

    a = b - a;
    b -= a;
    a = b + a;

    printf("%d, %d", a, b);
}        
]]></programlisting>
        <para>
            Egy rendkívül egyszerű, mégis praktikus matematikai megoldást alkalmazva felcserélhetjük két változó értékét segédváltozó bevezetése nélkül. A fenti 
            példámban az "a" változó értéke 4, a "b" változóé pedig 6. Első lépésnek az "a" értékét megváltoztatjuk (b-a = 2)-re. Ezután "b"-ből kivonjuk az "a"-t, 
            így 4 lesz az értéke. Végül a "b"-hez hozzáadjuk az "a" értékét (4+2 = 6), majd ezt hozzárendeljük az "a"-hoz. És voilá, megcseréltük a két változó értékét.
        </para>
        <para>
            Természetesen az ilyen egyszerű és triviális feladatok elvégzését a magas szintű programozási nyelvek elintézik a programozó helyett. Például C++-ban a 
            swap(a, b) függvény segítségével egyszerűen cserélhetjük meg két változó értékét, igaz, ez a háttérben egy csereváltozó segítségével hajtódik végre.
        </para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Labdapattogás if-ekkel:
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="src/Turing/labdaif.c">
                <filename>labdaif.c</filename>
            </link>
        </para>
         <programlisting language="C"><![CDATA[
#include <stdio.h>
#include <curses.h>
#include <unistd.h>

int main()
{
    int x, y, x_meret, y_meret;
    x = y = 0; 
    int sor = 1;
    int oszlop = 1;

    WINDOW *terminal;
    terminal = initscr();

    for(;;)
    {
        getmaxyx(terminal, y_meret ,x_meret);
        mvprintw(y, x, "HEYO!");
        refresh();          
        usleep(100000);     
        clear();            
        x += sor;
        y += oszlop;

        if (x <= 0)         //bal oldal
            sor *= -1;
        if (x >= max_x-1)   //jobb oldal
            sor *= -1;
        if (y >= max_y-1)   //alja
            oszlop *= -1;
        if (y <= 0)         //teteje
            oszlop *= -1;
    }
}
]]></programlisting>
        <para>
            A feladat elvégzéséhez igénybe kell vennünk a curses.h headert, valamint az stdio.h/unistd.h-t is. Az ncurses könyvtárral Console Application-ök írásakor
            tudjuk kihasználni a terminál adta lehetőségeket, különféle színezést, grafikai elemek megjelenítését teszi lehetővé. If elágazásokkal nem nehéz feladat, 
            hiszen csak meg kell vizsgálnunk, hogy a labda mikor ütközik "falhoz" (a terminal ablak széléhez), majd onnan milyen irányba fog visszapattanni. Mivel 4 
            oldala van, így négy elágazást írunk, ezeket egy végtelen ciklusba rakjuk. A ciklus előtt deklaráljuk a szükséges változókat, az x/y koordinátákat, melyeknek
            a kezdőértéke 0, az x_meret/y_meret a getmaxyx() függvényhez szükséges (a curses.h tartalmazza), mely a kurzor helyét határozza meg a terminálon, valamint 
            kell egy sor/oszlop változó, melyekkel szabályozhatjuk, hogy milyen lépésközönként jelenjen meg a labda a terminálablakban. Az alábbi 
        <programlisting language="C"><![CDATA[
WINDOW *terminal;
terminal = initscr();]]></programlisting>
            kódrészlet a terminál ablak méretét számolja ki. A refresh() folyamatosan frissíti a képernyőt, a usleep() a labdapattogás gyorsaságát határozza meg 
            (jelenleg a másodperc egytizede). A clear() "kitörli" az előző labdát, így mindig csak az aktuálisan kirajzoltat látjuk a képernyőn (valójában nem törli ki, 
            csak nem jeleníti meg). A többi részét a forráskódba ágyazott kommentekkel szerintem kellőképpen megmagyaráztam. 
        </para>
        <para>
            Labdapattogás if-ek nélkül: (A programot Dr. Bátfai Norbert Tanár Úr készítette, apró módosítás található csak benne.)
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="src/Turing/labdaifnelkul.c">
                <filename>labdaifnelkul.c</filename>
            </link>
        </para>
        <programlisting language="C"><![CDATA[
#include <stdio.h>
#include <stdlib.h>
#include <curses.h>
#include <unistd.h>

int main()
{
    int xj = 0, xk = 0, yj = 0, yk = 0;
    int mx = 80 * 2, my = 24 * 2;

    WINDOW *terminal;
    terminal = initscr();
    noecho();
    cbreak();
    nodelay(terminal, true);

    for (;;)
    {
        xj = (xj - 1) % mx;
        xk = (xk + 1) % mx;

        yj = (yj - 1) % my;
        yk = (yk + 1) % my;
        clear ();
        mvprintw (0, 0,
                  "--------------------------------------------------------------------------------");
        mvprintw (24, 0,
                  "--------------------------------------------------------------------------------");
        mvprintw (abs ((yj + (my - yk)) / 2),
                  abs ((xj + (mx - xk)) / 2), "X"); 
        refresh();
        usleep (100000);
    }
}]]></programlisting>
        <para>
            Egy rendkívül ötletes megoldást láthatunk fentebb. Lényege, hogy a labda mozgásútjához két számsort tartunk számon, az egyik csökken, a másik növekszik. Ezen 
            számsorok összemosásával megkapjuk a labda mozgásának pályáját (a függőleges és vízszintes koordinátákat). Ahhoz, hogy a labda a határon belül maradjon, a 
            maradékos osztás (%) műveletét vesszük igénybe. 
        </para>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Turing/bogomips.c">
                <filename>bogomips.c</filename>
            </link>
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>, 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="src/Turing/int1.cpp">
                <filename>int1.cpp</filename>
            </link>
        </para>
        <para>
<programlisting language="C++"><![CDATA[
#include <iostream>

using namespace std;

int main()
{
    int a = 1;
    int osszeg = 0;

    while (a <<= 1)
        osszeg++;
    cout << osszeg+1 << endl;
}]]></programlisting>
        </para>
        <para>
           Megoldás forrása: <link xlink:href="src/Turing/int2.cpp">
                <filename>int2.cpp</filename>
            </link> 
        </para>
        <para>
            <programlisting language="C++"><![CDATA[
#include <iostream>

using namespace std;

int main()
{
    int a = 1;
    int osszeg = 0; 
    do
    {
        osszeg++;
    } while(a <<= 1);
    cout << osszeg << endl;
}]]></programlisting>
        </para>
        <para>
            Két megoldást készítettem, az egyik elöltesztelő, a másik hátultesztelő ciklust használ. Sokat nem lehet róluk mondani, egy <type>int</type> típusú változón 
            bitshift műveleteket hajtanak végre, a lépések számát pedig kiírják az alapértelmezett outputra. Így ténylegesen megszámolja, hogy az <type>int</type> típus 
            32 bit hosszú. Érdekesség, hogy a sizeof(int) beépített függvény ugyanígy visszaadja az <type>int</type> méretét, csak bájtban. Ezt a mennyiséget ha 8-cal 
            megszorozzuk, akkor megkapjuk ugyanazt az eredményt, mint amit a fent látható két program ad eredményül.
        </para>
        <para>
            A MIPS rövidítése: Microprocessor without Interlocked Pipeline Stages. A CPU sebességének egy kitalált mértékegysége. A fentebb linkelt algoritmussal úgy 
            próbálják megsaccolni a processzorok sebességét, hogy megnézik, rendszerindításkor a benne lévő ciklus mennyi ideig fut. Mivel nem tényleges sebességet mér,
            így csupán egyfajta következtetés leszűrésére alkalmas, milyen gyors is a számítógépünkben található központi feldolgozóegység.
        </para>
         <mediaobject>
            <imageobject>
                <imagedata fileref="img/Turing/bogo.png"/>
            </imageobject>
            <caption>
                <para>Saját BogoMIPS eredményem (Windows alatt 920)</para>
            </caption>
        </mediaobject>
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="src/Turing/google.c"></link>
        </para>
        <para>
            
        </para>
        <para>
            
        </para>
    </section>
                                                                                                                                                                                                                                                                                                                                                        
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="src/Turing/monty.r">
            <filename>monty.r</filename>
            </link>
        </para>
        <para>
            <programlisting language="R"><![CDATA[
kiserletek_szama = 10000
kiserlet = sample(1:3, kiserletek_szama, replace = T) 
jatekos = sample(1:3, kiserletek_szama, replace = T) 
musorvezeto = vector(length = kiserletek_szama)
for (i in 1:kiserletek_szama) {
if (kiserlet[i]==jatekos[i]){
ajtok = setdiff(c(1,2,3), kiserlet[i])
}else{
ajtok = setdiff(c(1,2,3), c(kiserlet[i], jatekos[i]))
}
musorvezeto[i] = ajtok[sample(1:length(ajtok),1)]
}
nemvaltoztatesnyer = which(kiserlet == jatekos) 
valtoztat = vector(length = kiserletek_szama)

for (i in 1:kiserletek_szama) {
	holvaltoztat = setdiff(c(1,2,3), c(musorvezeto[i], jatekos[i])) 
	valtoztat[i] = holvaltoztat[sample(1:length(holvaltoztat),1)]
}

valtoztatesnyer = which(kiserlet == valtoztat)
sprintf("Kiserletek szama: %i", kiserletek_szama) 
length(nemvaltoztatesnyer) 
length(valtoztatesnyer) 
length(nemvaltoztatesnyer) / length(valtoztatesnyer) 
length(nemvaltoztatesnyer) + length(valtoztatesnyer)
]]></programlisting>
        </para>
        <para>
            A Monty Hall probléma kifejezetten érdekes jelenség, valószínűleg sose gondoltam volna rá. Képzeljük el, hogy egy vetélkedőshow keretein belül választanunk
            kell 3 ajtó közül. Az egyik mögött ott rejlik az értékes nyeremény, de a másik kettő mögött nincs semmi. Mivel nem tudjuk, hogy melyik mögött van a díj, 
            ezért random választunk a három közül egyet. Ekkor szimplán 1/3 matematikai esélyünk van arra, hogy eltaláltuk a helyes ajtót. Ezután a műsorvezető 
            kinyitja az egyik ajtót, ami mögött nincs semmi. Ekkor két lehetőségünk van: Vagy maradunk az eredeti döntésünk mellett, vagy megmásítjuk azt, és a másik 
            ajtót választjuk.
        </para>
        <para>
            Valószínűleg egy olyan ember, aki nincs tisztában a címben említett jelenséggel, rögtön rávágja, hogy mindegy, hogy megmásítjuk-e a döntésünket, hiszen nem
            változtat a nyerési esélyeinken. Viszont ha jobban belegondolunk, akkor könnyen beláthatjuk, hogy míg az első választási lehetőségnél 3 ajtó közül 
            választhattunk (így 1/3 esélyünk volt arra, hogy jól tippeltünk), ám a második lehetőségnél már csak kettő ajtó közül kell választanunk úgy, hogy a 
            harmadikról már tudjuk, hogy nem jó (tehát ha megmásítjuk a választásunkat, akkor 2/3 valószínűsége lesz annak, hogy a helyeset választjuk). Ettől 
            függetlenül persze ha megmásítjuk a választásunkat, az nem lesz garancia arra, hogy eltaláljuk a helyes ajtót, de matematikailag nagyobb esélyünk lesz rá. 
        </para>
        <para>
            A fenti R program erre a szcenárióra ad egy szimulációt. Az első sorban létrehoztunk egy változót, ami eltárolja, hogy hány kísérletet szeretnénk végrehajtani. 
            Ezután létrehozunk két vektort, amik 1-től 3-ig vehetnek fel értékeket. Az első az ajtókat reprezentálja, a második a játékos döntését. Mindegyik annyiszor
            vehet fel értékeket, amennyi a kísérletek száma, valamint többször is felvehetik ugyanazt az értéket. Ezután a játékvezető döntéséről gondoskodunk. A vektor
            hossza akkora lesz, amennyi a kísérletek száma, ezután egy range-based for ciklussal végigmegyünk a kísérleteken, és a játékos döntésétől függően megadja a 
            műsorvezető választását. 
        </para>
        <para>
            Ha a kísérletben a játékos által választott ajtó megegyezik a nyereményt rejtő ajtóval, akkor a c(1,2,3)-ból kiveszi a kísérlet számát, és az ajtok-ban a 
            másik kettő szám marad - ezek közül az egyiket kapja meg a műsorvezető. Viszont ha a játékos által választott mögött nincs nyeremény, akkor kizárásos alapon 
            a műsorvezetőnek muszáj a másik, egyértelmű ajtót választania, ami mögött szintén nincs semmi. Így az ajtok vektor ezt a számot kapja meg, amit aztán a 
            műsorvezető is. 
        </para>
        <para>
            Ezután megnézzük, hogy hányszor nyer a játékos, ha megváltoztatja az első döntését. Ehhez szintén létrehozunk egy vektort, ami a kísérletek számával lesz
            megegyező nagyságú, és hasonló módon, egy for ciklussal végigmegy a kísérleteken. Ilyenkor csak azt az ajtót választhatja, amelyiket se a műsorvezető, se a 
            játékos nem választott elsőre. A változtat és nyer vektorba belepakoljuk ezeket az eseteket. Vagyis azokat az eseteket, amikor a másodjára választott ajtó 
            megegyezik azzal, amelyik mögött a nyeremény van. 
        </para>
        <para>
            A végén kiírjuk a képernyőre a kísérletek számát, valamint azoknak az eseteknek a számát, amikor a játékos megváltoztatatta a döntését és nyert, illetve 
            azokat, amikor nem. Láthatjuk, hogy az előbbiből lényegesen több van.
        </para>
        <mediaobject>
        <imageobject>
            <imagedata fileref="img/Turing/monty.png" scale="50"/>
        </imageobject>
            <caption>
                <para>10000 kísérletre az eredmény</para>
            </caption>
        </mediaobject>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>

        <para>
            A természetes számok építőelemei a prímszámok. Abban az értelemben, 
            hogy minden természetes szám előállítható prímszámok szorzataként.
            Például 12=2*2*3, vagy például 33=3*11.
        </para>
        <para>
            Prímszám az a természetes szám, amely csak önmagával és eggyel 
            osztható. Eukleidész görög matematikus már Krisztus előtt tudta, 
            hogy végtelen sok prímszám van, de ma sem tudja senki, hogy 
            végtelen sok ikerprím van-e. Két prím ikerprím, ha különbségük 2.
        </para>
        <para>
            Két egymást követő páratlan prím között a legkisebb távolság a 2, 
            a legnagyobb távolság viszont bármilyen nagy lehet! Ez utóbbit 
            könnyű bebizonyítani. Legyen n egy tetszőlegesen nagy szám. 
            Akkor szorozzuk össze n+1-ig a számokat, azaz számoljuk ki az 
            1*2*3*… *(n-1)*n*(n+1) szorzatot, aminek a neve (n+1) faktoriális, 
            jele (n+1)!.
        </para>
        <para>
            Majd vizsgáljuk meg az a sorozatot:
        </para>    
        <para>
            (n+1)!+2, (n+1)!+3,… , (n+1)!+n, (n+1)!+ (n+1) ez n db egymást követő azám, ezekre (a jól ismert
            bizonyítás szerint) rendre igaz, hogy            
        </para>    
        <itemizedlist>
            <listitem>
                <para>(n+1)!+2=1*2*3*… *(n-1)*n*(n+1)+2, azaz 2*valamennyi+2, 2 többszöröse, így ami osztható kettővel</para>
            </listitem>
            <listitem>
                <para>(n+1)!+3=1*2*3*… *(n-1)*n*(n+1)+3, azaz 3*valamennyi+3, ami osztható hárommal</para>
            </listitem>
            <listitem>
                <para>...</para>
            </listitem>
            <listitem>
                <para>(n+1)!+(n-1)=1*2*3*… *(n-1)*n*(n+1)+(n-1), azaz (n-1)*valamennyi+(n-1), ami osztható (n-1)-el</para>
            </listitem>
            <listitem>
                <para>(n+1)!+n=1*2*3*… *(n-1)*n*(n+1)+n, azaz n*valamennyi+n-, ami osztható n-el</para>
            </listitem>
            <listitem>
                <para>(n+1)!+(n+1)=1*2*3*… *(n-1)*n*(n+1)+(n-1), azaz (n+1)*valamennyi+(n+1), ami osztható (n+1)-el</para>
            </listitem>
        </itemizedlist>
        <para>
            tehát ebben a sorozatban egy prim nincs, akkor a (n+1)!+2-nél 
            kisebb első prim és a (n+1)!+ (n+1)-nél nagyobb első 
            prim között a távolság legalább n.            
        </para>    
        <para>
            Az ikerprímszám sejtés azzal foglalkozik, amikor a prímek közötti 
            távolság 2. Azt mondja, hogy az egymástól 2 távolságra lévő prímek
            végtelen sokan vannak.
        </para>    
        <para>
            A Brun tétel azt mondja, hogy az ikerprímszámok reciprokaiból képzett sor összege, azaz
            a (1/3+1/5)+ (1/5+1/7)+ (1/11+1/13)+... véges vagy végtelen sor konvergens, ami azt jelenti, hogy ezek
            a törtek összeadva egy határt adnak ki pontosan vagy azt át nem lépve növekednek, 
            ami határ számot B<subscript>2</subscript> Brun konstansnak neveznek. Tehát ez
            nem dönti el a több ezer éve nyitott kérdést, hogy az ikerprímszámok halmaza végtelen-e? 
            Hiszen ha véges sok van és ezek
            reciprokait összeadjuk, akkor ugyanúgy nem lépjük át a B<subscript>2</subscript> Brun konstans értékét, 
            mintha végtelen 
            sok lenne, de ezek már csak olyan csökkenő mértékben járulnának hozzá a végtelen sor összegéhez, 
            hogy így sem lépnék át a Brun konstans értékét.     
        </para>
        <para>
            Ebben a példában egy olyan programot készítettünk, amely közelíteni próbálja a Brun konstans értékét.
            A repó <link xlink:href="../../../bhax/attention_raising/Primek_R/stp.r">
                <filename>bhax/attention_raising/Primek_R/stp.r</filename>
            </link> mevű állománya kiszámolja az ikerprímeket, összegzi
            a reciprokaikat és vizualizálja a kapott részeredményt.
        </para>
        <programlisting language="R">
<![CDATA[#   Copyright (C) 2019  Dr. Norbert Bátfai, nbatfai@gmail.com
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>

library(matlab)

stp <- function(x){

    primes = primes(x)
    diff = primes[2:length(primes)]-primes[1:length(primes)-1]
    idx = which(diff==2)
    t1primes = primes[idx]
    t2primes = primes[idx]+2
    rt1plust2 = 1/t1primes+1/t2primes
    return(sum(rt1plust2))
}

x=seq(13, 1000000, by=10000)
y = sapply(x, FUN = stp)
plot(x,y,type="b")
]]>
        </programlisting>        
        <para>
            Soronként értelemezzük ezt a programot:
        </para>                
        <programlisting language="R">
<![CDATA[ primes = primes(13)]]>
        </programlisting>        
        <para>
            Kiszámolja a megadott számig a prímeket.             
        </para>
        <screen>
<![CDATA[> primes=primes(13)
> primes
[1]  2  3  5  7 11 13
]]>
        </screen>
                
        <programlisting language="R">
<![CDATA[ diff = primes[2:length(primes)]-primes[1:length(primes)-1]]]>
        </programlisting>        
        <screen>
<![CDATA[> diff = primes[2:length(primes)]-primes[1:length(primes)-1]
> diff
[1] 1 2 2 4 2
]]>
        </screen>        
        <para>
            Az egymást követő prímek különbségét képzi, tehát 3-2, 5-3, 7-5, 11-7, 13-11.
        </para>
        <programlisting language="R">
<![CDATA[idx = which(diff==2)]]>
        </programlisting>        
        <screen>
<![CDATA[> idx = which(diff==2)
> idx
[1] 2 3 5
]]>
        </screen>              
        <para>
            Megnézi a <varname>diff</varname>-ben, hogy melyiknél lett kettő az eredmény, mert azok az ikerprím párok, ahol ez igaz.
            Ez a <varname>diff</varname>-ben lévő 3-2, 5-3, 7-5, 11-7, 13-11 külünbségek közül ez a 2., 3. és 5. indexűre teljesül.
        </para>
        <programlisting language="R">
<![CDATA[t1primes = primes[idx]]]>
        </programlisting>  
        <para>
            Kivette a primes-ból a párok első tagját. 
        </para>
        <programlisting language="R">
<![CDATA[t2primes = primes[idx]+2]]>
        </programlisting>        
        <para>
            A párok második tagját az első tagok kettő hozzáadásával képezzük.
        </para>
        <programlisting language="R">
<![CDATA[rt1plust2 = 1/t1primes+1/t2primes]]>
        </programlisting>        
        <para>
            Az 1/t1primes a t1primes 3,5,11 értékéből az alábbi reciprokokat képzi:
        </para>
        <screen>
<![CDATA[> 1/t1primes
[1] 0.33333333 0.20000000 0.09090909
]]>
        </screen>                      
        <para>
            Az 1/t2primes a t2primes 5,7,13 értékéből az alábbi reciprokokat képzi:
        </para>
        <screen>
<![CDATA[> 1/t2primes
[1] 0.20000000 0.14285714 0.07692308
]]>
        </screen>                      
        <para>
            Az 1/t1primes + 1/t2primes pedig ezeket a törteket rendre összeadja.
        </para>
        <screen>
<![CDATA[> 1/t1primes+1/t2primes
[1] 0.5333333 0.3428571 0.1678322
]]>
        </screen>                      
        <para>
            Nincs más dolgunk, mint ezeket a törteket összeadni a 
            <function>sum</function> függvénnyel.
        </para>
        
        <programlisting language="R">
<![CDATA[sum(rt1plust2)]]>
        </programlisting>    
        <screen>
<![CDATA[>   sum(rt1plust2)
[1] 1.044023
]]>
        </screen>            
        <para>
            A következő ábra azt mutatja, hogy a szumma értéke, hogyan nő, egy határértékhez tart, a 
            B<subscript>2</subscript> Brun konstanshoz. Ezt ezzel a csipettel rajzoltuk ki, ahol először a fenti 
            számítást 13-ig végezzük, majd 10013, majd 20013-ig, egészen 990013-ig, azaz közel 1 millióig.
            Vegyük észre, hogy az ábra első köre, a 13 értékhez tartozó 1.044023.
        </para>
        <programlisting language="R">
<![CDATA[x=seq(13, 1000000, by=10000)
y=sapply(x, FUN = stp)
plot(x,y,type="b")]]>
        </programlisting>          
        <figure>
            <title>A B<subscript>2</subscript> konstans közelítése</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/BrunKorok.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>A B<subscript>2</subscript> konstans közelítése</phrase>
                </textobject>
            </mediaobject>
        </figure>
        <para>
            Saját tapasztalatok: 
        </para>      
        <para>

        </para>                       
        <tip>
            <title>Werkfilm</title>
            <itemizedlist>
                <listitem>
                    <para>
                        <link xlink:href="https://youtu.be/VkMFrgBhN1g">https://youtu.be/VkMFrgBhN1g</link>
                    </para>    
                </listitem>                
                <listitem>
                    <para>
                        <link xlink:href="https://youtu.be/aF4YK6mBwf4">https://youtu.be/aF4YK6mBwf4</link>
                    </para>    
                </listitem>                
            </itemizedlist>                
        </tip>
    </section>

    <section>
        <title>Minecraft MALMÖ (csiga)</title>
        <para>
            Megoldás videó: <link xlink:href="https://www.youtube.com/watch?v=ytZRUCVykvw">https://www.youtube.com/watch?v=ytZRUCVykvw</link>
        </para>
    </section>

</chapter>                
