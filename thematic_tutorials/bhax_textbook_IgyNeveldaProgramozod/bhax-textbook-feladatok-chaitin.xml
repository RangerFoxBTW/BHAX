<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chaitin!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Iteratív és rekurzív faktoriális Lisp-ben</title>
        <para></para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/WZ3pEj8Ay8I">https://youtu.be/WZ3pEj8Ay8I</link>      
        </para>
        <para>
            Megoldás forrásai: <link xlink:href="src/Chaitin/fakt1.scm">fakt1.scm</link>, <link xlink:href="src/Chaitin/fakt2.scm">fakt2.scm</link>               
        </para>
        <para>
            Feladatunk, hogy a GIMP képszerkesztő programban script-fu scripteket írjunk Lisp nyelven. A GIMP egy nyílt forráskódú, ingyenes szoftver, amely lehetőséget ad különféle külső 
            plugin/script használatára. A Lisp (List Processing Language) egy meglehetősen régi, az 50-es években megalkotott kifejezésorientált programozási nyelv. Ez lényegében annyit 
            tesz, hogy mindent kifejezések formájában írunk le, és ha az egyik kiértékelődött, akkor az eredményét akár egy másik kifejezésben is felhasználhatjuk. 
        </para>
        <para>
            A nyelv alap építőelemei az atomok (tovább nem bontható részek): vannak szimbolikus és numerikus atomok. A szimbolikus atomok betűk, számok és bizonyos karakterek véges 
            sorozata, a numerikus atomok pedig kizárólag (akár előjeles) számokból állnak. Az atomokat space vagy sorvég választja el egymástól, ezek a whitespace karakterek jelzik az 
            egyes atomok végeit. Fontos megjegyezni, hogy a szokásos infix helyett prefix alakú kifejezésekkel dolgozunk, pl. (a / b) → (/ a b).
        </para>
        <para>
            <programlisting language="lisp"><![CDATA[
(define (fakt n)
    (define (iter osszeg hatar)
    (if (> hatar n)
        osszeg(iter (* hatar osszeg) (+ hatar 1))))
(iter 1 1))]]></programlisting>
        </para>
        <para>
            A nyelv sajátosságából kiindulva listákkal dolgozunk. A lista elemei rekurzívan értékelődnek ki, az atomok értéke nyilván önmaga. A define kulcsszó segítségével hozzuk létre a 
            függvényt, utána zárójelek közé írjuk a (fakt n)-t, ahol a fakt a függvény neve, az n pedig a paramétere (egy tetszőleges szám ebben az esetben). Így tudjuk majd futtatni a 
            kódot is. Mivel a nyelvben nincsenek definiálva iterációt végrehajtó ciklusok, így nekünk kell létrehozni egyet. 
        </para>
        <para>
            A (define (iter osszeg hatar) segítségével definiáljuk az iter eljárást, ami a ciklust reprezentálja majd. Ennek két argumentuma lesz, az első a ciklusváltozó, a második pedig 
            az iterációs határ. A belsejében vizsgáljuk az n értékét. Ha az értéke meghaladja az iterációs határt, akkor visszaadja az addig kiszámolt faktoriális értékét. De mivel az 
            egész nyelv a rekurzióra épül, így felesleges ilyen megoldásokkal próbálkozni, csak a saját munkánkat nehezítjük vele.
        </para>
        <para>
            <mediaobject>
                <imageobject>
                        <imagedata fileref="img/Chaitin/fakt1.png" scale="50"/>
                </imageobject>
            </mediaobject>
        </para>
        <para>
            <programlisting language="lisp"><![CDATA[
(define (fakt n)
(if (= n 1)
1
(* n (fakt (- n 1) ))))]]></programlisting>
        </para>
        <para>
            Ugyanúgy definiáljuk a fakt függvényünket. Megvizsgáljuk, hogy ha n egyenlő 1-gyel, akkor a faktoriális értéke is 1 lesz. Ha viszont nagyobb, akkor megszorozzuk n-t az n-1-gyel 
            (amire rekurzívan meghívtuk a fakt függvényt. Ebből a példából is látszik, hogy sokkal egyszerűbb a rekurziót használni Lispben. 
        </para>
        <para>
            <mediaobject>
                <imageobject>
                        <imagedata fileref="img/Chaitin/fakt2.png" scale="50"/>
                </imageobject>
            </mediaobject>
        </para>
    </section>        
<!--        
    <section>
        <title>Weizenbaum Eliza programja</title>
        <para>
            Éleszd fel Weizenbaum Eliza programját!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
    </section>        
-->
    <section>
        <title>Gimp Scheme Script-fu: króm effekt</title>
        <para>
            Írj olyan script-fu kiterjesztést a GIMP programhoz, amely megvalósítja a króm effektet egy 
            bemenő szövegre!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/B0Xv2J4-aTo">https://youtu.be/B0Xv2J4-aTo</link>      
        </para>
        <para>
            Megoldás forrása: <link xlink:href="src/Chaitin/chrome.scm">chrome.scm</link>               
        </para>
        <para>
            A  Script-fu a GIMP egy scriptnyelve, ami a Lispen alapul. Automatizálni tudunk bizonyos feladatokat vele, valamint rengeteg ilyen script elérhető az interneten, nem kell 
            mindet nekünk megvalósítanunk.
        </para> 
        <para>
            <programlisting language="lisp"><![CDATA[
; bhax_chrome3.scm
;
; BHAX-Chrome creates a chrome effect on a given text.
; Copyright (C) 2019  
; Norbert Bátfai, batfai.norbert@inf.unideb.hu
; Nándor Bátfai, batfai.nandi@gmail.com
;
;    This program is free software: you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation, either version 3 of the License, or
;    (at your option) any later version.
;
;    This program is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License
;    along with this program.  If not, see <https://www.gnu.org/licenses/>.
;
; Version history
;
;  This Scheme code is partially based on the Gimp tutorial 
;  http://penguinpetes.com/b2evo/index.php?p=351 
;  (the interactive steps of this tutorial are written in Scheme)
;
;  https://bhaxor.blog.hu/2019/01/10/a_gimp_lisp_hackelese_a_scheme_programozasi_nyelv
; 

(define (color-curve)
    (let* (
        (tomb (cons-array 8 'byte))
    )
        (aset tomb 0 0)
        (aset tomb 1 0)
        (aset tomb 2 50)
        (aset tomb 3 190)
        (aset tomb 4 110)
        (aset tomb 5 20)
        (aset tomb 6 200)
        (aset tomb 7 190)
    tomb)    
)

;(color-curve)

(define (elem x lista)

    (if (= x 1) (car lista) (elem (- x 1) ( cdr lista ) ) )

)

(define (text-wh text font fontsize)
(let*
    (
        (text-width 1)
        (text-height 1)
    )
 
    (set! text-width (car (gimp-text-get-extents-fontname text fontsize PIXELS font)))    
    (set! text-height (elem 2  (gimp-text-get-extents-fontname text fontsize PIXELS font)))    
    
    (list text-width text-height)
    )
)

;(text-width "alma" "Sans" 100)

(define (script-fu-bhax-chrome text font fontsize width height color gradient)
(let*
    (
        (image (car (gimp-image-new width height 0)))
        (layer (car (gimp-layer-new image width height RGB-IMAGE "bg" 100 LAYER-MODE-NORMAL-LEGACY)))
        (textfs)
        (text-width (car (text-wh text font fontsize)))
        (text-height (elem 2 (text-wh text font fontsize)))
        (layer2)        
    )
    
    ;step 1
    (gimp-image-insert-layer image layer 0 0)
    (gimp-context-set-foreground '(0 0 0))
    (gimp-drawable-fill layer  FILL-FOREGROUND )
    (gimp-context-set-foreground '(255 255 255))
   
    (set! textfs (car (gimp-text-layer-new image text font fontsize PIXELS)))
    (gimp-image-insert-layer image textfs 0 0)   
    (gimp-layer-set-offsets textfs (- (/ width 2) (/ text-width 2)) (- (/ height 2) (/ text-height 2)))
   
    (set! layer (car(gimp-image-merge-down image textfs CLIP-TO-BOTTOM-LAYER)))
   
    ;step 2   
    (plug-in-gauss-iir RUN-INTERACTIVE image layer 15 TRUE TRUE)
   
    ;step 3
    (gimp-drawable-levels layer HISTOGRAM-VALUE .11 .42 TRUE 1 0 1 TRUE)
   
    ;step 4   
    (plug-in-gauss-iir RUN-INTERACTIVE image layer 2 TRUE TRUE)

    ;step 5    
    (gimp-image-select-color image CHANNEL-OP-REPLACE layer '(0 0 0))
    (gimp-selection-invert image)

    ;step 6        
    (set! layer2 (car (gimp-layer-new image width height RGB-IMAGE "2" 100 LAYER-MODE-NORMAL-LEGACY)))
    (gimp-image-insert-layer image layer2 0 0)

    ;step 7        
	(gimp-context-set-gradient gradient) 
	(gimp-edit-blend layer2 BLEND-CUSTOM LAYER-MODE-NORMAL-LEGACY GRADIENT-LINEAR 100 0 REPEAT-NONE 
        FALSE TRUE 5 .1 TRUE width (/ height 3) width  (- height (/ height 3)))
    
    ;step 8        
    (plug-in-bump-map RUN-NONINTERACTIVE image layer2 layer 120 25 7 5 5 0 0 TRUE FALSE 2)
   
    ;step 9       
    (gimp-curves-spline layer2 HISTOGRAM-VALUE 8 (color-curve))
      
    (gimp-display-new image)
    (gimp-image-clean-all image)
    )
)

;(script-fu-bhax-chrome "Szabó Dani" "Sans" 120 1000 1000 '(255 0 0) "Crown molding")

(script-fu-register "script-fu-bhax-chrome"
    "Chrome3"
    "Creates a chrome effect on a given text."
    "Norbert Bátfai"
    "Copyright 2019, Norbert Bátfai"
    "January 19, 2019"
    ""
    SF-STRING       "Text"      "Bátf41 Haxor"
    SF-FONT         "Font"      "Sans"
    SF-ADJUSTMENT   "Font size" '(100 1 1000 1 10 0 1)
    SF-VALUE        "Width"     "1000"
    SF-VALUE        "Height"    "1000"
    SF-COLOR        "Color"     '(255 0 0)
    SF-GRADIENT     "Gradient"  "Crown molding"    
)
(script-fu-menu-register "script-fu-bhax-chrome" 
    "<Image>/File/Create/BHAX"
)]]></programlisting>
        </para> 
        <para>
            Létrehozunk egy tömböt visszaadó eljárást, ami a krómhatás eléréséhez szükséges színekkel kapcsolatos információkat tárolja el. Az (image (car (gimp-image-new width height 0))) 
            meghívja a gimp-image-new függvényt, ami létrehoz egy új képet a megadott szélességgel, magassággal és típussal. A car függvény visszaad egy egyelemű listát, az elkészült 
            image-t, amit berak az image nevű változóba. Ugyanez történik a layer-rel is.
        </para> 
        <para>
            Először a gimp-image-insert layert-t hozzáadjuk a képhez, majd beállítjuk a fekete hátteret, valamint a fehér alapú szöveget, amit aztán a megadott betűtípussal és mérettel 
            kiírunk, majd középre igazítjuk azt az offsets segítségével. Ezután beállítjuk, hogy a szöveg és a háttér egy réteget   alkosson. 
        </para> 
        <para>
            Ezután beállítjuk a Gauss-elmosódást 15-ös értékkel. Ettől lesz a kiírt szöveg sarkai lekerekítettek, az élei pedig simák. Majd változtatunk a színek szintjén, majd egy 
            gyengébb elmosódást alkalmazunk rá. Az 5. lépésben invertáljuk a háttér színét. A 6. lépés során egy második réteget hozunk létre, ezt teljesen transzparensnek (átlátszónak) 
            állítjuk be, majd kikapcsoljuk az első réteget, és kijelöljük a másodikat. A hetedik lépés eredménye a színátmenet, a 8. során adjuk meg a szöveg mélységét. A kilencedik, és 
            egyben utolsó lépés során a histogram értékét állítjuk, amely a krómhatásért felelős. 
        </para> 
        <para>
            A register rész arra kell, hogy a saját szövegünkre alkalmazni tudjuk ezt az effektet. Megadhatjuk a szöveget, betűtípust, betűméretet, szélességet, magasságot, színt és a 
            színátmenetet. 
        </para>
        <para>
            <mediaobject>
                <imageobject>
                        <imagedata fileref="img/Chaitin/krom_nev.png" scale="50"/>
                </imageobject>
            </mediaobject>
        </para> 
    </section>        

    <section>
        <title>Gimp Scheme Script-fu: név mandala</title>
        <para>
            Írj olyan script-fu kiterjesztést a GIMP programhoz, amely név-mandalát készít a
            bemenő szövegből!               
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/NRanL_AFxXc">https://youtu.be/NRanL_AFxXc</link>      
        </para>
        <para>
            Megoldás forrása: <link xlink:href="src/Chaitin/mandala.scm">mandala.scm</link>               
        </para>
        <para>
            <programlisting language="lisp"><![CDATA[
; bhax_mandala9.scm
;
; BHAX-Mandala creates a mandala from a text box.
; Copyright (C) 2019  Norbert Bátfai, batfai.norbert@inf.unideb.hu
;
;    This program is free software: you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation, either version 3 of the License, or
;    (at your option) any later version.
;
;    This program is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License
;    along with this program.  If not, see <https://www.gnu.org/licenses/>.
;
; Version history
;
;  This Scheme code is partially based on the Python code 
;  Pat625_Mandala_With_Your_Name.py by Tin Tran, which is released under the GNU GPL v3, see 
;  https://gimplearn.net/viewtopic.php/Pat625-Mandala-With-Your-Name-Script-for-GIMP?t=269&p=976
;
;  https://bhaxor.blog.hu/2019/01/10/a_gimp_lisp_hackelese_a_scheme_programozasi_nyelv
; 

(define (elem x lista)

    (if (= x 1) (car lista) (elem (- x 1) ( cdr lista ) ) )

)

(define (text-width text font fontsize)
(let*
    (
        (text-width 1)
    )
    (set! text-width (car (gimp-text-get-extents-fontname text fontsize PIXELS font)))    

    text-width
    )
)

(define (text-wh text font fontsize)
(let*
    (
        (text-width 1)
        (text-height 1)
    )
    ;;;
    (set! text-width (car (gimp-text-get-extents-fontname text fontsize PIXELS font)))    
    ;;; ved ki a lista 2. elemét
    (set! text-height (elem 2  (gimp-text-get-extents-fontname text fontsize PIXELS font)))    
    ;;;    
    
    (list text-width text-height)
    )
)


;(text-width "alma" "Sans" 100)

(define (script-fu-bhax-mandala text text2 font fontsize width height color gradient)
(let*
    (
        (image (car (gimp-image-new width height 0)))
        (layer (car (gimp-layer-new image width height RGB-IMAGE "bg" 100 LAYER-MODE-NORMAL-LEGACY)))
        (textfs)
        (text-layer)
        (text-width (text-width text font fontsize))
        ;;;
        (text2-width (car (text-wh text2 font fontsize)))
        (text2-height (elem 2 (text-wh text2 font fontsize)))
        ;;;
        (textfs-width)
        (textfs-height)
        (gradient-layer)
    )

    (gimp-image-insert-layer image layer 0 0)

    (gimp-context-set-foreground '(0 255 0))
    (gimp-drawable-fill layer FILL-FOREGROUND)
    (gimp-image-undo-disable image) 

    (gimp-context-set-foreground color)

    (set! textfs (car (gimp-text-layer-new image text font fontsize PIXELS)))
    (gimp-image-insert-layer image textfs 0 -1)
    (gimp-layer-set-offsets textfs (- (/ width 2) (/ text-width 2))  (/ height 2))
    (gimp-layer-resize-to-image-size textfs)

    (set! text-layer (car (gimp-layer-new-from-drawable textfs image)))
    (gimp-image-insert-layer image text-layer 0 -1)
    (gimp-item-transform-rotate-simple text-layer ROTATE-180 TRUE 0 0)
    (set! textfs (car(gimp-image-merge-down image text-layer CLIP-TO-BOTTOM-LAYER)))

    (set! text-layer (car (gimp-layer-new-from-drawable textfs image)))
    (gimp-image-insert-layer image text-layer 0 -1)
    (gimp-item-transform-rotate text-layer (/ *pi* 2) TRUE 0 0)
    (set! textfs (car(gimp-image-merge-down image text-layer CLIP-TO-BOTTOM-LAYER)))

    (set! text-layer (car (gimp-layer-new-from-drawable textfs image)))
    (gimp-image-insert-layer image text-layer 0 -1)
    (gimp-item-transform-rotate text-layer (/ *pi* 4) TRUE 0 0)
    (set! textfs (car(gimp-image-merge-down image text-layer CLIP-TO-BOTTOM-LAYER)))
    
    (set! text-layer (car (gimp-layer-new-from-drawable textfs image)))
    (gimp-image-insert-layer image text-layer 0 -1)
    (gimp-item-transform-rotate text-layer (/ *pi* 6) TRUE 0 0)
    (set! textfs (car(gimp-image-merge-down image text-layer CLIP-TO-BOTTOM-LAYER)))    
    
    (plug-in-autocrop-layer RUN-NONINTERACTIVE image textfs)
    (set! textfs-width (+ (car(gimp-drawable-width textfs)) 100))
    (set! textfs-height (+ (car(gimp-drawable-height textfs)) 100))
        
	(gimp-layer-resize-to-image-size textfs)
    
    (gimp-image-select-ellipse image CHANNEL-OP-REPLACE (- (- (/ width 2) (/ textfs-width 2)) 18) 
        (- (- (/ height 2) (/ textfs-height 2)) 18) (+ textfs-width 36) (+ textfs-height 36))
	(plug-in-sel2path RUN-NONINTERACTIVE image textfs)
        
    (gimp-context-set-brush-size 22)
    (gimp-edit-stroke textfs)
    
    (set! textfs-width (- textfs-width 70))
    (set! textfs-height (- textfs-height 70))
    
    (gimp-image-select-ellipse image CHANNEL-OP-REPLACE (- (- (/ width 2) (/ textfs-width 2)) 18) 
        (- (- (/ height 2) (/ textfs-height 2)) 18) (+ textfs-width 36) (+ textfs-height 36))
	(plug-in-sel2path RUN-NONINTERACTIVE image textfs)
        
    (gimp-context-set-brush-size 8)
    (gimp-edit-stroke textfs)
        
    (set! gradient-layer (car (gimp-layer-new image width height RGB-IMAGE "gradient" 100 LAYER-MODE-NORMAL-LEGACY)))
    
    (gimp-image-insert-layer image gradient-layer 0 -1)
	(gimp-image-select-item image CHANNEL-OP-REPLACE textfs)
	(gimp-context-set-gradient gradient) 
	(gimp-edit-blend gradient-layer BLEND-CUSTOM LAYER-MODE-NORMAL-LEGACY GRADIENT-RADIAL 100 0 
	REPEAT-TRIANGULAR FALSE TRUE 5 .1 TRUE (/ width 2) (/ height 2) (+ (+ (/ width 2) (/ textfs-width 2)) 8) (/ height 2))
	
	(plug-in-sel2path RUN-NONINTERACTIVE image textfs)

    (set! textfs (car (gimp-text-layer-new image text2 font fontsize PIXELS)))
    (gimp-image-insert-layer image textfs 0 -1)
    (gimp-message (number->string text2-height))
    (gimp-layer-set-offsets textfs (- (/ width 2) (/ text2-width 2)) (- (/ height 2) (/ text2-height 2)))
		
    ;(gimp-selection-none image)
    ;(gimp-image-flatten image)
    
    (gimp-display-new image)
    (gimp-image-clean-all image)
    )
)

;(script-fu-bhax-mandala "Szabó Dani" "Szabó Dani" "Ruge Boogie" 120 1920 1080 '(255 0 0) "Shadows 3")

(script-fu-register "script-fu-bhax-mandala"
    "Mandala9"
    "Creates a mandala from a text box."
    "Norbert Bátfai"
    "Copyright 2019, Norbert Bátfai"
    "January 9, 2019"
    ""
    SF-STRING       "Text"      "Bátf41 Haxor"
    SF-STRING       "Text2"     "BHAX"
    SF-FONT         "Font"      "Sans"
    SF-ADJUSTMENT   "Font size" '(100 1 1000 1 10 0 1)
    SF-VALUE        "Width"     "1000"
    SF-VALUE        "Height"    "1000"
    SF-COLOR        "Color"     '(255 0 0)
    SF-GRADIENT     "Gradient"  "Deep Sea"
)
(script-fu-menu-register "script-fu-bhax-mandala" 
    "<Image>/File/Create/BHAX"
)]]></programlisting>
        </para>  
        <para>
            A kód eleje a képfájl létrehozásáért felelős. A let segítségével lokális változókat tudunk létrehozni (pl. az image-t és a layert). A car kulcsszó a lista első elemét adja 
            vissza, a cdr pedig az elsőn kívül a lista összes elemét. Ezután létrehozunk egy réteget a kép számára, ennek a színét fehérre állítjuk. A (gimp-context-set-foreground color) 
            pedig azért kell, hogy mi magunk is tetszőlegesen megváltoztassuk a hátteret. 
        </para> 
        <para>
            Ezután megadjuk a felhasználni kívánt szöveget (a nevünket), majd kiválasztjuk a kívánt betűtípust és méretet. Létrehozunk egy mezőt, amibe behelyezzük a nevünket, majd ennek 
            a mezőnek a nagyságát a kép felére csökkentjük. Megduplázzuk a réteget, majd az új réteget 180 fokkal elforgatjuk, így fejjel lefelé lesz látható a nevünk. Ezt a két réteget 
            egyesítjük, majd ezt lemásoljuk és elforgatjuk 90 fokkal. 
        </para>         
        <para>
            Ezután ezt az eljárást ismételgetjük, vagyis a réteget összevonjuk az elforgatott másolattal, ezután lemásoljuk az így kapott réteget, majd azt megint elforgatjuk. A forgatás 
            közben csökken, először 45, majd 30 fokra. Végül kijelöljük a nevünk szövegét és felnagyítjuk a réteg méretére. Majd kirajzolunk két kört. A külsőnek 22 pixel szélességet, a 
            belsőnek pedig 8-at állítunk. Végül színátmenetet alkalmazunk a két körre és a nevünkre. 
        </para>
        <para>
            A forráskód végén található egy „űrlap”, amely segítségével személyre szabhatjuk a mandalát. Ugyanúgy, mint az előző feladatban, itt is megadhatunk két szöveget (az egyikből 
            fog felépülni a mandala, a másik pedig a mandala közepén lesz olvasható). Emellett megadhatjuk a betűtípust, a betűméretet, a szélességet, a magasságot, a színt és a 
            színátmenetet.
        </para>
        <para>
            <mediaobject>
                <imageobject>
                        <imagedata fileref="img/Chaitin/mandala.png" scale="50"/>
                </imageobject>
            </mediaobject>
        </para>
    </section>  
      
    <section>
        <title>Minecraft MALMÖ: Javíts tovább a 21RF-en!</title>
        <para>
            Passz :(
        </para>
    </section>    

<!--    
    <section>
        <title>Lambda</title>
        <para>
            Hasonlítsd össze a következő programokat!
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>      
        </para>
        <para>
            Megoldás forrása: <link xlink:href=""></link>               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>            
    </section>        
-->    

<!--
    <section>
        <title>Omega</title>
        <para>
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
    </section>        

</chapter>                
