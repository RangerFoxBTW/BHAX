<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Lauda!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    
    <section>
        <title>Port scan</title>        
        <para>
            Mutassunk rá ebben a port szkennelő forrásban a kivételkezelés szerepére!
            <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#id527287">https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#id527287</link>                 
        </para>
        
    </section>

    <section>
        <title>AOP</title>
        <para>
            Szőj bele egy átszövő vonatkozást az első védési programod Java átiratába! (Sztenderd védési
feladat volt korábban.)
        </para>
    </section>

    <section>
        <title>Android Játék</title>        
        <para>
            Írjunk egy egyszerű Androidos „játékot”! Építkezzünk például a 2. hét „Helló, Android!” feladatára!                
        </para>
        
    </section>

    <section>
        <title>Junit teszt</title>        
        <para>
            A <link xlink:href="https://progpater.blog.hu/2011/03/05/labormeres_otthon_avagy_hogyan_dolgozok_fel_egy_pedat">progprater</link>
            poszt kézzel számított mélységét és szórását dolgozd be egy Junit tesztbe (sztenderd védési feladat
            volt korábban).    
        </para>
        
    </section>

    <section>
        <title>OSCI</title>
        <para>
            Készíts egyszerű C++/OpenGL-es megjelenítőt, amiben egy kocsit irányítasz az úton.
        </para>
    </section>

    <section>
        <title>EPAM: DI</title>
        <para>
            Implementálj egy alap DI (Dependency Injection) keretrendszert Java-ban annotációk és reflexió
használatával megvalósítva az IoC-t (Inversion Of Control).
        </para>
    </section>

    <section>
        <title>EPAM: JSON szerializáció</title>
        <para>
            Implementálj egy JSON szerializációs könyvtárat, mely képes kezelni sztringeket, számokat, listákat
és beágyazott objektumokat. A megoldás meg kell feleljen az összes adott unit tesztnek.
Plusz feladat:
 1. a könyvtár tudjon deszerializálni
        </para>
    </section>

    <section>
        <title>EPAM: Kivételkezelés</title>
        <para>
            Adott az alábbi kódrészlet. Mi történik, ha az input változó 1F, “string” vagy pedig null? Meghívódik
e minden esetben a finally ág? Válaszod indokold!
        </para>
        <para>
            <mediaobject>
                <imageobject>
                        <imagedata fileref="img/2/epamfeladat.png" scale="50"/>
                </imageobject>
            </mediaobject>
        </para>
    </section>
</chapter>