<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Liskov!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    
    <section>
        <title>Liskov helyettesítés sértése</title>
        <para>
            Írjunk olyan OO, leforduló Java és C++ kódcsipetet, amely megsérti a Liskov elvet! Mutassunk rá a 
            megoldásra: jobb OO tervezés.
        </para>
        <para>  
            <link xlink:href="https://arato.inf.unideb.hu/batfai.norbert/PROG2/Prog2_1.pdf">93-99 fólia</link>
            (számos példa szerepel az elv megsértésére az UDPROG repóban, lásd pl. source/binom/BatfaiBarki/madarak/)
        </para>
        
    </section>

    <section>
        <title>Szülő-gyerek</title>
        <para>
            Írjunk Szülő-gyerek Java és C++ osztálydefiníciót, amelyben demonstrálni tudjuk, hogy az ősön
            keresztül csak az ős üzenetei küldhetőek!
        </para>
        <para>
            Lásd fóliák! <link xlink:href="https://arato.inf.unideb.hu/batfai.norbert/PROG2/Prog2_1.pdf">98. fólia</link>

        </para>
        
    </section> 

    <section>
        <title>Anti OO</title>
        <para>
            A BBP algoritmussal 4 a Pi hexadecimális kifejtésének a 0. pozíciótól számított 10<superscript>6</superscript>, 10<superscript>7</superscript>,10<superscript>8</superscript> 
            darab jegyét határozzuk meg C, C++, Java és C# nyelveken és vessük össze a futási időket!
        </para>
        
    </section>

    <section>
        <title>Hello, Android!</title>
        <para>
            Élesszük fel az SMNIST for Humans projektet! 
            <link xlink:href="https://gitlab.com/nbatfai/smnist/tree/master/forHumans/SMNISTforHumansExp3/app/src/main">https://gitlab.com/nbatfai/smnist/tree/master/forHumans/SMNISTforHumansExp3/app/src/main</link>
            Apró módosításokat eszközölj benne, pl. színvilág.
        </para> 
    </section>

    <section>
        <title>Ciklomatikus komplexitás</title>
        <para>
            Számoljuk ki valamelyik programunk függvényeinek ciklomatikus komplexitását! Lásd a fogalom
            tekintetében a <link xlink:href="https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_2.pdf">https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_2.pdf (77-79 fóliát)!</link> 
        </para>
        
    </section>

    <section>
        <title>EPAM: Interfész evolúció Java-ban</title>
        <para>
            Mutasd be milyen változások történtek Java 7 és Java 8 között az interfészekben. Miért volt erre
szükség, milyen problémát vezetett ez be?
        </para>
    </section>

    <section>
        <title>EPAM: Liskov féle helyettesíthetőség elve, öröklődés</title>
        <para>
            Adott az alábbi osztály hierarchia.
class Vehicle, class Car extends Vehicle, class Supercar extends
Car
Mindegyik osztály konstruktorában történik egy kiíratás, valamint a Vehicle osztályban szereplő
start() metódus mindegyik alosztályban felül van definiálva.
Mi történik ezen kódok futtatása esetén, és miért?
<programlisting language="java"><![CDATA[
Vehicle firstVehicle = new Supercar();
firstVehicle.start();
System.out.println(firstVehicle instanceof Car);
Car secondVehicle = (Car) firstVehicle;
secondVehicle.start();
System.out.println(secondVehicle instanceof Supercar);
Supercar thirdVehicle = new Vehicle();
thirdVehicle.start();]]></programlisting>
        </para>
    </section>

    <section>
        <title>EPAM: Interfész, Osztály, Absztrak Osztály</title>
        <para>
            Mi a különbség Java-ban a Class, Abstract Class és az Interface között? Egy tetszőleges példával /
példa kódon keresztül mutasd be őket és hogy mikor melyik koncepciót célszerű használni.
        </para>
    </section>
</chapter>                
