<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Caesar!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title><type>double **</type> háromszögmátrix</title>
        <para>
            Írj egy olyan <function>malloc</function> és <function>free</function>
            párost használó C programot, amely helyet foglal
            egy alsó háromszög mátrixnak a szabad tárban!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/FI91jWwsHJ0">https://youtu.be/FI91jWwsHJ0</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Caesar/tm.c">
            </link> 
        </para>
        <para>
            Védés: <link xlink:href=""></link>
        </para>
        <programlisting language="c"><![CDATA[#include <stdio.h>
#include <stdlib.h>

int
main ()
{
    int nr = 5;
    double **tm;

    if ((tm = (double **) malloc (nr * sizeof (double *))) == NULL)
    {
        return -1;
    }

    for (int i = 0; i < nr; ++i)
    {
        if ((tm[i] = (double *) malloc ((i + 1) * sizeof (double))) == NULL)
        {
            return -1;
        }

    }

    for (int i = 0; i < nr; ++i)
        for (int j = 0; j < i + 1; ++j)
            tm[i][j] = i * (i + 1) / 2 + j;

    for (int i = 0; i < nr; ++i)
    {
        for (int j = 0; j < i + 1; ++j)
            printf ("%f, ", tm[i][j]);
        printf ("\n");
    }

    tm[3][0] = 42.0;
    (*(tm + 3))[1] = 43.0;	// mi van, ha itt hiányzik a külső ()
    *(tm[3] + 2) = 44.0;
    *(*(tm + 3) + 3) = 45.0;

    for (int i = 0; i < nr; ++i)
    {
        for (int j = 0; j < i + 1; ++j)
            printf ("%f, ", tm[i][j]);
        printf ("\n");
    }

    for (int i = 0; i < nr; ++i)
        free (tm[i]);

    free (tm);

    return 0;
}]]></programlisting>
        <figure>
            <title>A <type>double **</type> háromszögmátrix a memóriában</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/doublecscs.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>A <type>double **</type> háromszögmátrix a memóriában</phrase>
                </textobject>
            </mediaobject>
        </figure>                             
        <para>
            A háromszögmátrixok négyzetes mátrixok. A felső háromszögmátrixokban a főátló alatt csupa 0-s érték található, az alsó háromszögmátrixokban pedig a főátló 
            felett találhatóak csupa 0-s értékek. 
        </para>          
        <para>
            A programban elsőnek meghatározzuk, hogy 5 sora legyen. Ezután a **tm segítségével lefoglalunk a memóriában egy területet, majd a malloc segítségével 
            ellenőrizzük, hogy a program rendelkezésére áll-e a kívánt mennyiségű memória. Ha nem, akkor Null értéket visszaadva leáll a program. A malloc void*-t adna 
            vissza eredményül, de a programban meghatározzuk neki, hogy double** típust adjon vissza (castolás). 
        </para>  
        <para>
            Ezek után szükség van egy for ciklusra, ami megnézi, hogy elegendő memória áll-e a rendelkezésre a megadott számú soroknak. Ha a pointer Null értéket kap, akkor leáll a program. 
        </para>
        <para>
            Majd egymásba ágyazott for ciklusokkal feltöltjük a mátrixot elemekkel (az i a sorokat, j az oszlopokat jelöli), majd szintén for ciklussal kiíratjuk az 
            elemeit.
        </para>
        <para>
            Az utolsó rész demonstrálja, hogy másképp is ki lehet íratni az elemeket (a program a 3. sor elemeit írja ki másként), végül a free() eljárással 
            felszabadítja a sorokhoz lefoglalt memóriát, végül a mátrix által lefoglalt helyet is.
        </para>
        <para>  
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/Caesar/tm.png" scale="50"/>
                </imageobject>
            </mediaobject>
        </para>
    </section>        

    <section>
        <title>C EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót C-ben!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/favrqJECa08">https://youtu.be/favrqJECa08</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="src/Caesar/e.c">e.c</link>               
        </para>
        <para>
            <programlisting language="c"><![CDATA[
#include <stdio.h>
#include <unistd.h>
#include <string.h>

#define MAX_KULCS 100
#define BUFFER_MERET 256

int
main (int argc, char **argv)
{

  char kulcs[MAX_KULCS];
  char buffer[BUFFER_MERET];

  int kulcs_index = 0;
  int olvasott_bajtok = 0;

  int kulcs_meret = strlen (argv[1]);
  strncpy (kulcs, argv[1], MAX_KULCS);

  while ((olvasott_bajtok = read (0, (void *) buffer, BUFFER_MERET)))
    {

      for (int i = 0; i < olvasott_bajtok; i++)
	{

	  buffer[i] = buffer[i] ^ kulcs[kulcs_index];
	  kulcs_index = (kulcs_index + 1) % kulcs_meret;

	}

      write (1, buffer, olvasott_bajtok);

    }
}]]></programlisting>
        </para>  
        <para>
            Egyszerű titkosító programot lehet megvalósítani a XOR (kizáró vagy/EXOR) logikai művelet segítségével. A C programunk elején include-oljuk a szükséges könyvtárakat, valamint a 
            #define parancs segítségével definiálunk két konstanst: a MAX_KULCS-ot, valamint a BUFFER_MERET-et (a nevük magukért beszélnek szerintem). 
        </para> 
        <para>
            Ezután a main argumnetumai az argc és az argv parancssori argumentumokat. Az argc (ARGument Count) egy int típusú argumentum, és eltárolja, hogy hány darab argumentum lett 
            átadva a felhasználó által, beleértve a program nevét. Az argv (ARGumentum Vector) egy char pointereket tartalmazó tömb, ami felsorolja az összes parancssori argumentumot.
        </para>    
        <para>
            Majd létrehozunk két char típusú tömböt, a kulcsot (100 karakter), illetve a buffert (256). Továbbá létrehozzuk a kulcs indexét, valamint az olvasott Bájtok számát eltároló 
            változókat, amelyeknek kezdőértékük 0. Ezután deklaráljuk a kulcs méretét, aminek értéke megegyezik az argv 2. elemének a nagyságával. Ezután az strncpy függvénnyel átmásoljuk 
            a kulcs változóba az argv[1]-et.  
        </para>
        <para>
            A program további részében egy while ciklussal addig olvasunk be egy fájlt (Bájtonként), amíg a buffer engedi (256-os maximumot adtunk meg neki a program elején). A beolvasott 
            Bájtok mindegyikén elvégezzük a XOR műveletet a kulcs KULCS_INDEX-edik elemével, majd ezt az indexet megnöveljük 1-gyel, majd elosztjuk a kulcs méretével. Ezután ez az érték lesz 
            az új kulcs. Végül egy fájlba kiíratjuk a már titkosított szöveget. 
        </para>     
    </section>  

    <section>
        <title>Java EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót Java-ban!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/0GZS1491xP0">https://youtu.be/0GZS1491xP0</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="src/Caesar/main.java">main.java</link>              
        </para>
        <para>
            <programlisting language="java"><![CDATA[
import java.io.InputStream;
import java.io.OutputStream;

public class main{
    public static void encode(String key, InputStream in, OutputStream out)
    throws java.io.IOException
    {
        byte[] thekey = key.getBytes();
        byte[] inputBuffer = new byte[256];
        int keyIndex = 0;
        int readBytes = 0;

        while((readBytes = in.read(inputBuffer)) != -1)
        {
            for(int i=0; i<readBytes; i++)
            {
                inputBuffer[i] = (byte)(inputBuffer[i] ^ thekey[keyIndex]);
                keyIndex = (keyIndex + 1) % key.length();
            }
            out.write(inputBuffer, 0, readBytes);
        }
    }

    public static void main(String[] args){
        if(args[0] != "")
        {
            try
            {
                encode(args[0], System.in, System.out);
            }
            catch(java.io.IOException e)
            {
                e.printStackTrace();
            }
        }
        else
        {
            System.out.println("Adj meg egy kulcsot!");
            System.out.println("java main <key>");
        }
    }
}]]></programlisting>
        </para>     
        <para>
            A Java egy magas szintű programozási nyelv, sokkal szofisztikáltabb, mint a C. Ettől függetlenül az EXOR titkosító elvi szinten hasonlóképp működik itt is. Először egy elegáns 
            try-catch-csel megnézzük, hogy a program kapott-e argumentumot. Ha nem, akkor a standard outputra kiírjuk a felhasználónak, hogy adjon meg egy kulcsot. Ha van argumentum, akkor 
            az encode a hívás során megkapja ezeket, valamint a kulcsot és a standrad input/output streameket is. 
        </para>      
        <para>
            Ugyanúgy, mint a C-s programunkban a kapott kulcsot Bájtokra bontja, valamint deklaráljuk a szükséges char tömböket és int típusú változókat. Amíg az inputról érkezik Bájt, 
            addig azokon elvégzi a XOR műveletet a kulcs megfelelő karakterével, majd a végén kiíratjuk a tömb elemeit, vagyis a titkosított szöveget. 
        </para> 
    </section>  

    <section xml:id="bhax-textbook-feladatok-caesar.EXOR-toro">
        <title>C EXOR törő</title>
        <para>
            Írj egy olyan C programot, amely megtöri az első feladatban előállított titkos szövegeket!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/8IgHTJ7XZCs">https://youtu.be/8IgHTJ7XZCs</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="src/Caesar/kodtor50000.c">kodtoro50000.c</link>               
        </para>
        <para>
            Engem tutoriált: <link xlink:href="https://gitlab.com/stoky123/repo">Takács Balázs</link>
        </para>
        <para>
            <programlisting language="c"><![CDATA[
#define MAX_TITKOS 4096
#define OLVASAS_BUFFER 256
#define KULCS_MERET 4
#define _GNU_SOURCE

#include <stdio.h>
#include <unistd.h>
#include <string.h>

double
atlagos_szohossz (const char *titkos, int titkos_meret)
{
    int sz = 0;
    for (int i = 0; i < titkos_meret; ++i)
        if (titkos[i] == ' ')
            ++sz;

    return (double) titkos_meret / sz;
}

int
tiszta_lehet (const char *titkos, int titkos_meret)
{
    // a tiszta szoveg valszeg tartalmazza a gyakori magyar szavakat
    // illetve az átlagos szóhossz vizsgálatával csökkentjük a
    // potenciális töréseket

    double szohossz = atlagos_szohossz (titkos, titkos_meret);

    return szohossz > 6.0 && szohossz < 9.0;/*
           && strcasestr (titkos, "hogy") && strcasestr (titkos, "nem")
           && strcasestr (titkos, "az") && strcasestr (titkos, "ha");*/

}

void
exor (const char kulcs[], int kulcs_meret, char titkos[], int titkos_meret)
{

    int kulcs_index = 0;

    for (int i = 0; i < titkos_meret; ++i)
    {

        titkos[i] = titkos[i] ^ kulcs[kulcs_index];
        kulcs_index = (kulcs_index + 1) % kulcs_meret;

    }

}

int
exor_tores (const char kulcs[], int kulcs_meret, char titkos[],
            int titkos_meret)
{

    exor (kulcs, kulcs_meret, titkos, titkos_meret);

    return tiszta_lehet (titkos, titkos_meret);

}

int
main (void)
{

    char kulcs[KULCS_MERET];
    char titkos[MAX_TITKOS];
    char *p = titkos;
    int olvasott_bajtok;

    // titkos fajt berantasa
    while ((olvasott_bajtok =
                read (0, (void *) p,
                      (p - titkos + OLVASAS_BUFFER <
                       MAX_TITKOS) ? OLVASAS_BUFFER : titkos + MAX_TITKOS - p)))
        p += olvasott_bajtok;

    // maradek hely nullazasa a titkos bufferben
    for (int i = 0; i < MAX_TITKOS - (p - titkos); ++i)
        titkos[p - titkos + i] = '\0';
	//char str[4]= {'i', 'z', 'h', 'g'};
	char str[KULCS_MERET] = "lugn";
    // osszes kulcs eloallitasa
    for (int ii = 0; ii <= 3; ++ii)
	for (int li = 0; li <= 3; ++li)
	    for (int ki = 0; ki <= 3; ++ki)
		for (int ji = 0; ji <= 3; ++ji)
                                {
                                    kulcs[0] = str[ii];
                                    kulcs[1] = str[li];
                                    kulcs[2] = str[ki];
                                    kulcs[3] = str[ji];
                                    
                                    if (exor_tores (kulcs, KULCS_MERET, titkos, p - titkos))
                                        printf
                                        ("Kulcs: [%c%c%c%c]\nTiszta szoveg: [%s]\n",
                                         kulcs[ii], kulcs[li], kulcs[ki], kulcs[ji], titkos);

                                    // ujra EXOR-ozunk, igy nem kell egy masodik buffer
                                    exor (kulcs, KULCS_MERET, titkos, p - titkos);
                                }

    return 0;
}]]></programlisting>
        </para>     
        <para>
            A fentebb látható program képes feltörni az egyszerűen titkosított szövegeket, feltéve, ha tudjuk, hogy milyen karaktereket tartalmaz a kulcs, illetve hány karakterből áll. A 
            szokásos define és include utasítások után található az atlagos_szohossz függvény, aminek a neve nagyon beszédes. Megnézi, mekkora az átlagos szóhossz, így jelentősen 
            lecsökkentve a feltöréshez szükséges időmennyiséget. 
        </para>
        <para>
            Ezután található a tiszta_lehet függvény, ami megvizsgálja, hogy a feltörni kívánt szöveg tartalmazza-e a gyakran használt magyar szavak valamelyikét, ezeket utána rögzíti, 
            ezzel is csökkentve a futási időt. Ezután a program exor eljárása a XOR műveletet alkalmazza a bufferbe beolvasott szövegre, valamint a kulcsindexre, ezzel visszafejtve a 
            titkosított szöveget. Az exor_tores meghívja az előbb említett függvényt, valamint visszaadja a tiszta_lehet függvény eredményét. 
        </para>
        <para>
            A mainben a program a titkosított szöveget a bufferbe olvassa, majd a fennmaradó helyeket kinullázza. Ezután egymásba ágyazott for ciklusok segítségével (ahány karakteres a 
            kulcs, annyi ciklus szükséges) előállítja a program az összes lehetséges kulcsot. Végül kiíratjuk a kulcsot, és a visszafejtett, immár tiszta szöveget. 
        </para>
        <para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/Caesar/feltort.jpg" scale="50"/>
                </imageobject>
                <textobject>
                    <phrase>Ea. TP-ért feltörtem egy hallgatótárs titkosított szövegét ezzel a programmal.</phrase>
                </textobject>
            </mediaobject>
        </para>       
    </section>  

    <section>
        <title>Neurális OR, AND és EXOR kapu</title>
        <para>
            R
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/bwXYCu6027Y">https://youtu.be/bwXYCu6027Y</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="src/Caesar/neural.r">neural.r</link>               
        </para>
        <para>
            <programlisting language="r"><![CDATA[
library(neuralnet)

a1    <- c(0,1,0,1)
a2    <- c(0,0,1,1)
OR    <- c(0,1,1,1)

or.data <- data.frame(a1, a2, OR)

nn.or <- neuralnet(OR~a1+a2, or.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.or)

compute(nn.or, or.data[,1:2])


a1    <- c(0,1,0,1)
a2    <- c(0,0,1,1)
OR    <- c(0,1,1,1)
AND   <- c(0,0,0,1)

orand.data <- data.frame(a1, a2, OR, AND)

nn.orand <- neuralnet(OR+AND~a1+a2, orand.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.orand)

compute(nn.orand, orand.data[,1:2])



a1      <- c(0,1,0,1)
a2      <- c(0,0,1,1)
EXOR    <- c(0,1,1,0)

exor.data <- data.frame(a1, a2, EXOR)

nn.exor <- neuralnet(EXOR~a1+a2, exor.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.exor)

compute(nn.exor, exor.data[,1:2])



a1      <- c(0,1,0,1)
a2      <- c(0,0,1,1)
EXOR    <- c(0,1,1,0)

exor.data <- data.frame(a1, a2, EXOR)

nn.exor <- neuralnet(EXOR~a1+a2, exor.data, hidden=c(6, 4, 6), linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.exor)

compute(nn.exor, exor.data[,1:2])]]></programlisting>
        </para>
        <para>
            Dr. Bátfai Norbert Tanár Úr programja. 
        </para>            
        <para>
            A (mesterséges) neurális hálókat a mesterséges intelligencia megalkotására/tesztelésére, valamint különféle szimulációs folyamatok során használják. Ezekben a hálózatokban 
            neuronok, illetve azok csoportjai kommunikálnak egymással függvények segítségével. Három rétegből állnak: a bemeneti rétegen érkezik be az adat, majd ez továbbítja őket a 
            további rétegeknek, ahol az adatokon különféle  műveleteket hajt végre a hálózat, majd a kimeneti rétegre kerül az átalakított adat. 
        </para>
        <para>
            A neuronok valami jel/jelzés továbbítására képesek. Ez akkor történik, ha valamilyen inger éri őket (a programban akkor, ha elérik a küszöbértéküket). A fenti program két 
            mintasort rajzol ki, majd azokon elvégzi az ÉS, VAGY, KIZÁRÓ VAGY logikai műveleteket. Ezekből az adatokból készít egy data-framet, és a kapott adatokat eltárolja egy táblában. 
            Ezek segítségével a program „megtanítja” a neuronoknak, hogy az adott értékeknél milyen jelet kell adniuk. A plot utasítással kirajzoljuk a Neurális hálót, végül a compute-tal 
            ellenőrizzük a program működését. 
        </para>
    </section>        

    <section>
        <title>Hiba-visszaterjesztéses perceptron</title>
        <para>
            C++
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/CRkm1aDshRE">https://youtu.be/CRkm1aDshRE</link>
        </para>
        <para>
            Videóban látható kódok forrása:             
        </para>
        <para>
                <link xlink:href="src/Caeasar/mandel.cpp">mandel.cpp</link>   
        </para>
        <para>
                <link xlink:href="src/Caeasar/mlp.hpp">mlp.hpp</link>   
        </para>
        <para>
                <link xlink:href="src/Caeasar/ql.hpp">ql.hpp</link>   
        </para>
        <para>
                <link xlink:href="src/Caeasar/main.cpp">main.cpp</link> 
        </para>       
        <para>
            Tutoriáltam: <link xlink:href="https://gitlab.com/stoky123/repo">Takács Balázs</link>
        </para> 
        <para>
            A perceptronokról további infók: <link xlink:href="https://en.wikipedia.org/wiki/Perceptron">link</link>
        </para>    
        <para>
            <programlisting language="c"><![CDATA[
#include <iostream>
#include "mlp.hpp"
#include <png++/png.hpp>

int main( int argc, char **argv)
{
	png::image <png::rgb_pixel> png_image ( argv[1] );
	int size = png_image.get_width() *png_image.get_height();

	Perceptron* p = new Perceptron ( 3, size, 256, 1);

	double* image=new double[size];
	for( int i{0}; i<png_image.get_width(); ++i)
		for( int j{0}; j<png_image.get_height(); ++j )
			image[i*png_image.get_width() +j] = png_image[i][j].red;

	double value = (*p) (image);

	std::cout<< value<< std::endl;

	delete p;
	delete [] image; 
}]]></programlisting>
        </para>
        <para>
            A perceptron egy, a mesterséges intelligencia fejlesztésénél használatos neuron. Úgy működik, mint egy alakfelismerő, amely a bemeneti adatra elvégez bizonyos műveleteket, és 
            ezáltal megtanítja a neurális hálónak a bemeneti adatot osztályozni (jelen esetben a Mandelbrot-halmazról készített kép rgb kódjai). Ezután súlyozott összegzést végez, majd egy 
            nemlineáris leképezést hoz létre.
        </para>
        <para>
            A program sokrétű, és elég bonyolult. A mainben meghívjuk az mlp.hpp headert (ami nem egészen egy header, benne található a perceptron osztály), majd a mainben beimportáljuk a 
            képet, helyet foglalunk a perceptron objektumnak, és egy for ciklussal feltöltjük a Mandelbrot-halmazos kép paramétereit használva az image képet. Ezután a függvény ezzel a 
            képpel számol, majd kiírja az eredmény a standard outputra. Végül törli a perceptront, és a képet is.
        </para>
    </section>        

    <section>
        <title>Minecraft MALMÖ (érzékelés)</title>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/MkZlcV5Sdx8">https://youtu.be/MkZlcV5Sdx8</link>
        </para>
    </section
</chapter>                