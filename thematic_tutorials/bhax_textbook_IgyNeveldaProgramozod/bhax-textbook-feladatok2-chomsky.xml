<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    
    <section>
        <title>Encoding</title>
        <para>Fordítsuk le és futtassuk a Javat tanítok könyv MandelbrotHalmazNagyító.java forrását úgy, hogy a
            fájl nevekben és a forrásokban is meghagyjuk az ékezetes betűket!
            <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/adatok.html">https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/adatok.html</link>
        </para>
		<para>
			Ebben a feladatban az egyetlen nehézség az volt, hogy meg kellett találni, hogy milyen karakterkódolást használtak a program írásakor, ezután csak a megfelelő kapcsolót kellett megkeresni ahhoz, hogy sikeresen lefordítsuk és futtassuk. 
		</para>
		<para>
			Az első elég könnyű volt, hiszen a legtöbb IDE és komolyabb szövegszerkesztő ezt automatikusan kijelzi nekünk. A második is egyszerű volt az én esetemben, még kapcsoló sem kellett hozzá. Ez úgy lehetséges, hogy az Ubuntu rendszerszinten automatikusan magyar nyelvi beállításokat használ. Vagyis UTF-8 karakterkódolást. Ezt a <command>locale</command> paranccsal könnyen ellenőrizhetjük. Azon ritka pillanatok egyike ez, amikor a egy Linux rendszer nem még egy akadályt gördít a felhasználó elé, hanem segít neki. Öröm volt látni!
		</para>
		<para>
			De ha esetleg nem magyar nyelvi beállításokat használunk, akkor se essünk pánikba! Az -encoding kapcsolóval bármilyen karakterkódolást megadhatunk fordításkor, így biztosan sikerrel járunk. Mivel ez magyar ékezetes latin karaktereket használ, így az ISO8859-2 karakterkódolás jó is lesz nekünk. Ez tartalmazza a legtöbb Közép-Európai nyelv karaktereit (cseh, szlovák, magyar, román stb.). Alább láthatjuk a program kimenetét.
		</para>
		<para>
			<mediaobject>
                <imageobject>
                        <imagedata fileref="img/Chomsky2/encoding.png" scale="50"/>
                </imageobject>
            </mediaobject>
		</para>
    </section>

    <section>
        <title>l3334d1c4</title>
        <para>
            Írj olyan OO Java vagy C++ osztályt, amely leet cipherként működik, azaz megvalósítja ezt a betű helyettesítést: https://simple.wikipedia.org/wiki/Leet (Ha ez első részben nem tetted meg, akkor írasd ki és
			magyarázd meg a használt struktúratömb memóriafoglalását!)
        </para>
		<para>
			Megoldás forrása: <link xlink:href="src/Chomsky2/Leet.java">Leet.java</link>
		</para>
		<para>
			Az előző félévben már kellett csinálni egy Leeter programot C++-ban, így az alapokról nem beszélnék. Ezt kellett átültetni egy OO programba. Hogy aktuális legyen, Java-ban oldottam meg a feladatot.
		</para>
		<para>
			<programlisting language="java"><![CDATA[
import java.util.Scanner;
import java.util.HashMap;
import java.util.regex.Matcher; 
import java.util.regex.Pattern;


public class Leet {
	
	private String toLeet(String str) {
		Pattern pattern = Pattern.compile("[^a-zA-Z0-9]");
		StringBuilder sb = new StringBuilder();
		HashMap<Character, String> map = new HashMap<Character, String>();
		
		map.put('A', "@");
		map.put('B', "˘A´z");
		map.put('C', "Â©");
		map.put('D', "Ä‘");
		map.put('E', "â");
		map.put('F', "´C’");
		map.put('G', "6");
		map.put('H', "#");
		map.put('I', "!");
		map.put('J', "Â˙z");
		map.put('K', "X");
		map.put('L', "ÂŁ");
		map.put('M', "M");
		map.put('N', "r");
		map.put('O', "0");
		map.put('P', "p");
		map.put('Q', "0");
		map.put('R', "Â®");
		map.put('S', "$");
		map.put('T', "7");
		map.put('U', "Â$");
		map.put('V', "v");
		map.put('W', "w");
		map.put('X', "%");
		map.put('Y', "ÂA");
		map.put('Z', "z");
		map.put('0', "O");
		map.put('1', "I");
		map.put('2',"2");
		map.put('3',"2");
		map.put('4',"2");
		map.put('5',"2");
		map.put('6',"2");
		map.put('7',"2");
		map.put('8',"2");
		map.put('9',"2");
		
		for (int i = 0; i < str.length(); i++) {
			char key = Character.toUpperCase(str.charAt(i));
			Matcher matcher = pattern.matcher(Character.toString(key));
			if (matcher.find()) {
				sb.append(key);
				sb.append(' ');
			} 
			else {
				sb.append(map.get(key));
				sb.append(' ');
			}
		}
		
		return sb.toString();
	}
	
	
	public static void main(String[] args) {
		Leet obj = new Leet();
		Scanner scan = new Scanner(System.in);

		String leetWord;
		
		System.out.println("Írd be a szöveget!");
		leetWord = scan.nextLine();
		
		String leet = obj.toLeet(leetWord);
		System.out.println("Leet: " + leet);

	}
}]]></programlisting>
		</para>
		<para>
			Reguláris kifejezésekkel és HashMap-pel oldottam meg, így volt szerintem a legtisztább. Létrehozunk egy mintát, amiben kis-és nagybetűk, valamint számok lesznek. StringBuilder segítségével fogjuk tárolni a végeredményt. A HashMap-ben pedig eltároljuk, hogy mit mire fog cserélni a program.
		</para>
		<para>
			Ezután jön a talán a legfontosabb része a programnak, egy for ciklus. A szöveget először nagybetűsre konvertáljuk, mert így nem kell eltárolni a kisbetűkhöz tartozó csereértékeket is. A megkapott szöveg minden karakterén végigmegy és megvizsgálja, hogy az adott karakter szerepel-e a mintában. Ha igen, akkor a mintában szereplő párjára cseréli, ellenkező esetben pedig visszarakja a beolvasott karaktert (hogy ne null értéket adjon vissza). Végül az így lefordított eredményt Stringgé konvertálva visszaadjuk. 
		</para>
		<para>
			A mainben példánoysítunk, illetve a felhasználótól bekérjük a fordítandó szöveget. Ezután az eredményt kiíratjuk. 
		</para>
		<para>
			<mediaobject>
                <imageobject>
                        <imagedata fileref="img/Chomsky2/leet.png" scale="75"/>
                </imageobject>
            </mediaobject>
		</para>
		<para>
			Beszéljünk egy kicsit a HashMap memóriahasználatáról. Ugyan programozóként nem igazán kell ezzel foglalkoznunk (lévén dinamikus adatszerkezet és a memóriaallokálás automatikusan történik), néha nem árt tudni, mik történnek a háttérben. Valójában egy tömb adatszerkezetről van szó, amelynek minden eleme egy linkelt lista. Ezek a listák alkotják a kulcs-érték párokat, amik a HashMap-ben vannak. A memóriahasználatát két tényező befolyásolja: a létrehozáskor meghatározott mérete, valamint a load factor. 
		</para>
		<para>
			Létrehozáskor a zárójelben megadhatjuk, hogy mekkora legyen a kezdeti mérete az adatszerkezetnek. Ha nem adunk meg semmit, akkor automatikusan 16 elemű lesz a tömb. A load factor az az érték, amely meghatározza, hogy mennyire lehet „telített” a tömb, mielőtt megnőne a mérete. Ez alapesetben 0.75, vagyis egy alapértelmezetten 16 elemű HashMap-be 12 kulcs-érték párt helyezhetünk, mielőtt megnőne az adatszerkezet által lefoglalt memória. Ha ennél magasabbra állítjuk a load factor méretét, az ugyan csökkenti az előre lefoglalt memória méretét, de ugyanakkor meghosszabbítja a különböző műveletek (get, put stb) végrehajtási idejét. Ez a legoptimálisabb érték. Miután elértük a load factor értékét, egyszerűen megkétszerezi az aktuális tömb méretét. Ez azt jelenti, hogy egy teljesen új, kétszer akkora tömböt hoz létre, melybe átmásolja (és újrahasheli) az eredeti elemeket. A régi HashMap-ről pedig a GC gondoskodik a későbbiekben.
		</para>
    </section>

    <section>
        <title>Full screen</title>
        <para>
            Készítsünk egy teljes képernyős Java programot!
            Tipp: <link xlink:href="https://www.tankonyvtar.hu/en/tartalom/tkt/javat-tanitok-javat/ch03.html#labirintus_jatek">https://www.tankonyvtar.hu/en/tartalom/tkt/javat-tanitok-javat/ch03.html#labirintus_jatek</link>
        </para>  
		<para>
			Megoldás forrásai: <link xlink:href="src/Chomsky2/Display.java">Display.java</link>, <link xlink:href="src/Chomsky2/Screen.java">Screen.java</link>
		</para>
		<para>
			Ezt a feladatot kicsit megúszósra fogtam, hiszen a programom nem csinál mást, mint kiír egy szöveget teljes képernyős módban. A jövőben, ha lesz kedvem, majd átalakítom kicsit. De addig is nézzük a kódot. Swinget használtam, ami egy rettenetesen outdated tool Application fejlesztéshez, de az alapok megtanítására talán elég…
		</para>     
		<para>
			<programlisting language="java"><![CDATA[
import java.awt.*;
import javax.swing.JFrame;

public class Screen {
	
	private GraphicsDevice gd;
	
	public Screen() {
		GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
		gd = env.getDefaultScreenDevice();
	}]]></programlisting>
		</para>
		<para>
			A Screen osztály szolgál a teljes képernyős mód megjelenítéséért. Először importáljuk az abstract window toolkitet, valamint a JFrame-t. Ezek standard libraryk windowed/full screenes grafikus programok írásához Javaban. Az osztályon belül létrehozzuk a GraphicsDevice változót, ami lényegében a grafikus megjelenítő lesz. Ezután lekérdezzük a grafikus környezetet, majd az alapértelmezett megjelenítőt eltároljuk a gd-ben. 
		</para>
		<para>
            <programlisting language="java"><![CDATA[
public void setFullScreen(DisplayMode dm, JFrame window) {
		
		window.setUndecorated(true);
		window.setResizable(false);
		gd.setFullScreenWindow(window);
		
		if (dm != null && gd.isDisplayChangeSupported()) {
			try {
				gd.setDisplayMode(dm);
			}
			catch (Exception e){}
		}
	}
	
	public Window getFullScreenWindow() {
		return gd.getFullScreenWindow();
	}
	
	public void restore() {
		Window w = gd.getFullScreenWindow();
		if (w != null)
			w.dispose();
		gd.setFullScreenWindow(null);
	}
}]]></programlisting>
		</para>
		<para>
			A setFullScreen metódus fogja a proginkat teljes képernyőre rakni. Valójában a benne lévő setUndecorated(true) fogja ténylegesen eltávolítani az ablak kezelősávját felülről, így emiatt lesz full screen. Mellé még adjuk, hogy ne is lehessen átméretezni. Az if-ben azt vizsgáljuk, hogy van-e monitorbeállításunk, és azokat lehet-e állítani. A getFullScreenWindow fogja visszaadni a teljes képernyőt.  A restore metódus fog levenni a full screenről.
		</para>
		<para>
            <programlisting language="java"><![CDATA[
import java.awt.*;
import javax.swing.JFrame;

public class Display extends JFrame{
	
	public void run(DisplayMode dm) {
		getContentPane().setBackground(Color.cyan);
		getContentPane().setForeground(Color.black);
		getContentPane().setFont(new Font("Calibri", Font.BOLD, 100));

		Screen s = new Screen();
		try {
			s.setFullScreen(dm, this);
			try {
				Thread.sleep(3000);
			} catch (Exception e) {}
		} finally {
			s.restore();
		}
	}
	
	public void paint(Graphics g) {
		super.paint(g);
		g.drawString("Hello there!", 890, 530);
	}
		
	public static void main(String[] args) {
		DisplayMode dm = new DisplayMode(800, 600, 16, DisplayMode.REFRESH_RATE_UNKNOWN);	//Linux alatt kell szélesség, magasság, színmélység, képfrissítés
		Display d = new Display();
		d.run(dm);
	}
	
}]]></programlisting>
		</para>
		<para>
			A Display osztályunk fog ténylegesen dolgokat megjeleníteni a programban. Importáljuk a szükséges könyvtárakat (ha labeleket is szeretnénk, akkor a swingen belül a JLabel is kell, illetve az egérkattintás támogatásához az awt.event.*). Az osztályt kiterjesztjük a JFrame-re. A run metódusban állítjuk be a hátteret, betűtípust, betűszínt, méretet stb-t. Itt írtam egy try catch blokkot, ami azt szabályozza, hogy meddig maradjon full screenben a program (így kerültem meg, hogy használjam az egeret). A paint metódus segítségével fogunk a képernyőre írni (igazából sok dolgot lehet vele, képet beszúrni, ilyenek). Ezt a drawString-gel tesszük meg. Végül ebben az osztályban található a main, amiben a példányosítás történik. 
		</para>
		<para>
			<mediaobject>
                <imageobject>
                        <imagedata fileref="img/Chomsky2/Full.png" scale="50"/>
                </imageobject>
            </mediaobject>
		</para>
    </section>   

    <section>
        <title>EPAM: Bináris keresés és Buborék rendezés implementálása</title>
        <para>
            Implementálj egy Java osztályt, amely képes egy előre definiált n darab Integer tárolására. Ennek az
osztálynak az alábbi funkcionalitásokkal kell rendelkeznie: Elem hozzáadása a tárolt elemekhez, Egy tetszőleges Integer értékről tudja eldönteni, hogy már tároljuk-e (ehhez egy bináris keresőt
implementálj), A tárolt elemeket az osztályunk be tudja rendezni és a rendezett (pl növekvő sorrend) struktúrával
vissza tud térni (ehhez egy buborék rendezőt implementálj)
        </para>
        <para>
            Megoldás forrásai: <link xlink:href="src/Chomsky2/IntegerStorage.java">IntegerStorage.java</link>, <link xlink:href="src/Chomsky2/Main.java">Main.java</link>
        </para>
        <para>
            Egy klasszikus, kicsit gondolkodtató, de végtelenül élvezetes feladat. Kicsit mindenből kér a feladat, remek gyakorlófeladat azoknak, akik ismerkednek a Java nyelvvel, vagy épp az objektum-orientált programozással. Alább látható a megoldásom:
        </para>
        <para>
                <programlisting language="java"><![CDATA[
import java.util.Arrays;

public class IntegerStorage {
	
	private int[] storage;
	private int index = 0;
	private int size;
	private boolean sorted = true;
	
	public IntegerStorage(int size) {
		this.size = size;
		this.storage = new int[size];
	}
	
	public IntegerStorage(int[] s) {
		this.size = s.length;
		this.index = this.size;
		this.storage = s;
		this.sorted = false;
	}]]></programlisting>
        </para>
        <para>
            Mivel tömbbel fogunk dolgozni, így a legelején importáljuk a java.util package-ből az Arrays osztályt. Ezután létrehozzuk az IntegerStorage osztályt, amiben dolgozni fogunk. Kezdésként létrehozzuk a használni kívánt attribútumainkat: egy tömböt, amiben tárolni tudjuk az elemeket, a tömb indexét, ami majd az elemek hozzáadásánál kell, kényelmi szempontból a tömb méretét is eltároljuk, illetve egy logikai változót, ami azt mondja majd meg, hogy a tömbünk rendezett-e. Ezek mind privát láthatóságúak az enkapszuláció érdekében. Ezalatt találhatóak a set metódusok, amik emiatt kellenek. Itt lényegében megmondjuk a fordítónak, hogy az osztály objektumaira referálunk a változónevekkel. Ezt a this kulcsszó segítségével tesszük meg.
        </para>
        <para>
                <programlisting language="java"><![CDATA[
public boolean search(int number) {
		
		if (!sorted)
			sort();
		
		int left = 0;
		int right = size - 1;
		
		while (left <= right) {
			int mid = left + (right - left) / 2;
			if (storage[mid] == number)
				return true;
			if (storage[mid] > number)
				right = mid -1;
			else
				left = mid + 1;
		}
		
		return false;
	}]]></programlisting>
        </para>
        <para>
            Ezután következik a bináris keresés implemetálása. tavaly tanultuk Adatszerkezetek órán, így nem sokat beszélnék róla. Mivel az adatszerkezetenek rendezettnek kell lennie, hogy bináris keresést hajtsunk végre rajta, így először ezt kell megvizsgálni. Ha nem rendezett, akkor meghívjuk a rendező eljárásunkat. Ezután jön maga a bináris keresés. Én az iteratív verziót írtam le, de van belőle rekurzív mód is. Megnézi, hogy a középső elem egyezik-e a keresett értékkel. ha igen, akkor azzal tér vissza. ha nem, akkor megvizsgálja, hogy a keresett elem nagyobb vagy kisebb-e a középsőnél. Ettől függően a középsőtől vagy balra vagy jobbra található részben keresi tovább az elemet. Ha nem találta meg, akkor hamis értékkel tér vissza.
        </para>
        <para>
                <programlisting language="java"><![CDATA[
	public int[] sort() {
		for (int i = 0; i < size; i++) {
			for (int j = 1; j < (size - i); j++) {
				if (storage[j-1] > storage[j]) {
					int t = storage[j-1];
					storage[j-1] = storage[j];
					storage[j] = t;
				}
			}
		}
		sorted = true;
		
		return storage;
	}

public void add(int number) {
storage[index++] = number;
sorted = false;
	}]]></programlisting>
        </para>
        <para>
            Ezután jön a buborékos rendezés, amiről szintén tanultunk már. Nem ez a leghatékonyabb rendezési algoritmus (sőt), de legalább könnyű implementálni. Egy segédváltozóval oldja meg az elemek cseréjét. Ha végbement, akkor a sorted logikai változó értékét igazra állítja, majd visszatér a rendezett tömbbel. Végül jön az add metódus, ami tömbhöz hozzáadja az elemeket. Nagyon egyszerű. Bővítés után természetesen a rendezettséget jelző logikai változót hamisra állítja.
        </para>
        <para>
                <programlisting language="java"><![CDATA[
	@Override
	public String toString() {
		return "IntegerStorage [s=" + Arrays.toString(storage) + ", index=" + index + ", size=" + size + ", sorted=" + sorted
				+ "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + index;
		result = prime * result + Arrays.hashCode(storage);
		result = prime * result + size;
		result = prime * result + (sorted ? 1231 : 1237);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		IntegerStorage other = (IntegerStorage) obj;
		if (index != other.index)
			return false;
		if (!Arrays.equals(storage, other.storage))
			return false;
		if (size != other.size)
			return false;
		if (sorted != other.sorted)
			return false;
		return true;
	}
}]]></programlisting>
        </para>
        <para>
            A végén találhatóak az Override metódusok. Ezekről már egy korábbi fejezetben írtam, így nem térnék ki rájuk. Eclipse-ben pár kattintással létre lehet hozni őket, ami elég praktikus.
        </para>
        <para>
                <programlisting language="java"><![CDATA[
public class Main {

	public static void main(String[] args) {
		IntegerStorage store = new IntegerStorage(10);
		for (int i = 6; i < 13; i++) 
			store.add(i);
		store.add(5);
		store.add(3);
		store.add(1);
		
		store.sort();
		System.out.println(store);
		System.out.println(store.search(2));
		System.out.println(store.search(7));
	}

}]]></programlisting>
        </para>
        <para>
            A Mainben történik a példányosítás, illetve írtam egy kis tesztet, amivel kipróbáltam, hogy minden működik-e. Alul látható a kimenet.
        </para>
        <para>
            <mediaobject>
                <imageobject>
                        <imagedata fileref="img/Chomsky2/int.png" scale="70"/>
                </imageobject>
            </mediaobject>
        </para>
    </section>
</chapter> 